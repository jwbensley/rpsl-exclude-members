<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.26 (Ruby 3.2.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-bensley-rpsl-exclude-members-00" category="info" submissionType="IETF">
  <front>
    <title abbrev="Explicitly excluding objects from RPSL sets">Explicitly excluding objects from RPSL sets</title>

    <author initials="J." surname="Bensley" fullname="James Bensley">
      <organization>Inter.link GmbH</organization>
      <address>
        <postal>
          <street>Boxhagener Str. 80</street>
          <city>Berlin</city>
          <code>10245</code>
          <country>Germany</country>
        </postal>
        <email>james@inter.link</email>
      </address>
    </author>

    <date year="2025" month="March" day="24"/>

    
    
    

    <abstract>


<?line 75?>

<t>This document updates <xref target="RFC2622"/> and <xref target="RFC4012"/> by defining the <spanx style="verb">excl-members</spanx> attribute on as-set and route-set classes in the Routing Policy Specification Language (RPSL). This new attribute allows operators to overcome limitations of the existing syntax, which currently only supports the implicit inclusion of everything contained within an as-set or route-set.</t>



    </abstract>



  </front>

  <middle>


<?line 79?>

<section anchor="introduction"><name>Introduction</name>

<t>The Routing Policy Specification Language (RPSL) <xref target="RFC2622"/> defines the as-set and route-set classes. These sets can either reference a direct member of the set (such as an AS number, IP prefix, etc.), or additional sets which themselves have their own direct members and/or reference yet more sets, ad infinitum. Server and client software can follow these references to recursively resolve all the members of a set i.e., until all references have been resolved leaving a set of prefixes or ASes.</t>

<section anchor="existing-methods-of-inclusion"><name>Existing Methods of Inclusion</name>

<t>The existing RPSL syntax allows for members of an as-set or route-set to be specified in multiple ways:</t>

<t><list style="numbers" type="1">
  <t><xref target="RFC2622"/> defines the <spanx style="verb">members</spanx> attribute.
  <list style="numbers" type="1">
      <t><xref section="5.1" sectionFormat="of" target="RFC2622"/> defines that for an as-set this attribute stores one or more primary keys, each referencing an aut-num or or as-set object.</t>
      <t>Sections <xref target="RFC2622" section="5.2" sectionFormat="bare"/> and <xref target="RFC2622" section="5.3" sectionFormat="bare"/> of <xref target="RFC2622"/> and  defines that for a route-set this attribute may store one or more primary keys, each referencing a route-set object which optionally has a range operator appended, an aut-num, or an as-set. Alternatively, the <spanx style="verb">members</spanx> attribute on a route-set may store an IPv4 address prefix range directly i.e., not an RPSL primary key that points directly to route object, and that prefix range is used to identify matching route objects. That address prefix range may optionally have a range operator appended.</t>
    </list></t>
  <t><xref section="4.2" sectionFormat="of" target="RFC4012"/> defines the <spanx style="verb">mp-members</spanx> attribute for route-sets. This attribute may store one or more primary keys, each referencing a route-set object which optionally has a range operator appended, or an IPv4 address prefix range directly, or an IPv6 address prefix range directly. Although not explicitly stated in RFC4012, implementations of the <spanx style="verb">mp-members</spanx> attributes have based it on the RFC2622 definition and allowed the attribute to also store the RPSL primary key of aut-nums and as-sets.</t>
  <t><xref target="RFC2622"/> defines the <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes.
  <list style="numbers" type="1">
      <t><xref section="5.1" sectionFormat="of" target="RFC2622"/> defines that for an as-set these attributes allow for the inclusion of aut-nums in the as-set, iff the criteria defined in the RFC linking both attributes together is met.</t>
      <t><xref section="5.2" sectionFormat="of" target="RFC2622"/> defines that for a route-set these attributes allow for the inclusion of routes in the route-set, iff the criteria defined in the RFC linking both attributes together is met.</t>
    </list></t>
  <t><xref section="3" sectionFormat="of" target="RFC4012"/> defines the router6 class along with the <spanx style="verb">member-of</spanx> attribute on that class, and as a result, allows for the inclusion of route6 objects in a route-set, iff the criteria relating to <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes defined in <xref section="5.2" sectionFormat="of" target="RFC2622"/> is met.</t>
</list></t>

<t>When using the <spanx style="verb">(mp-)members</spanx> attribute to include an as-set or route-set (hereinafter the "included set") inside another as-set or route-set (hereinafter the "including set"), all members of the included set are included in the including set. This is not limited to the members directly nested inside the included set, but all members recursively included all the way down the RPSL hierarchy. This implicit recursive inclusion logic is herein referred to as "greedy" logic.</t>

<t>In the figure below, the as-set <spanx style="verb">AS-EXAMPLE-1</spanx> only includes one member but, as a result of that single inclusion, AS-EXAMPLE-1 now contains the aut-nums AS65001, AS65002, and AS65003:</t>

<figure title="A three level hierarchy is created even though AS-EXAMPLE-1 only includes one additional as-set"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2

as-set: AS-EXAMPLE-2
members: AS65001, AS65002, AS-EXAMPLE-3

as-set: AS-EXAMPLE-3
members: AS65003
]]></sourcecode></figure>

<t>The same inclusion logic applies to a route-set which references another route-set, as-set, or aut-num, in the <spanx style="verb">members</spanx> attribute; everything inside the included set, all the way down the recursed tree, is implicitly included into the including set.</t>

<t>Similarly greedy logic also applies to prefixes too; the <spanx style="verb">(mp-)members</spanx> attribute of a route-set includes any route/route6 objects which match the IPv4/6 address prefix range and optional range operator.</t>

</section>
<section anchor="existing-methods-of-exclusion"><name>Existing Methods of Exclusion</name>

<t>The filter-set class and <spanx style="verb">filter</spanx> attribute are defined in <xref section="5.4" sectionFormat="of" target="RFC2622"/>. Correspondingly, the <spanx style="verb">mp-filter</spanx> attribute was later defined in <xref section="2.5.2" sectionFormat="of" target="RFC4012"/>. Together these attributes provide a method for declaring in the IRR ecosystem the prefixes a network will not accept.</t>

<t>Additionally, the <spanx style="verb">(mp-)filter</spanx> attribute may be used to exclude route/route6 objects which have been included by the greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of a route-set. This is achieved by first including all route/route6 objects which match the IPv4/6 address prefix range and optional range operator in the <spanx style="verb">(mp-)members</spanx> attribute on the route-set, and then removing any route/route6 objects from this result which match the IPv4/6 address prefix range and optional range operator in the <spanx style="verb">(mp-)members</spanx> attribute of the filter-set.</t>

<t>For as-sets and route-sets which use the <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes, both attributes have to contain corresponding values. This already reduces the greediness of the inclusion logic. It is also already possible to further reduce the greediness. This can be achieved by changing the value of <spanx style="verb">mbrs-by-ref</spanx> from ANY to a list of specific values, and/or by removing the as-set or route-set primary key from the <spanx style="verb">members-of</spanx> attribute of an aut-num or route/route6 object.</t>

<t>There is currently no method to exclude either an aut-num, an as-set, or a route-set, which was included by the greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of an as-set or route-set object.</t>

</section>
<section anchor="the-need-for-additional-exclusion-control"><name>The Need for Additional Exclusion Control</name>

<t>The existing greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of as-sets and route-sets, coupled with the inability to alter this logic, can result in various undesired effects for operators. A non-exhaustive list of possible undesirable outcomes follows:</t>

<t><list style="numbers" type="1">
  <t>A member is added to a set which is not connected to or related to the network operated by the owner of the including set. This allows the including set owner to originate prefixes they aren't authorised to originate. Upstreams and peers of the network owning the including set, aren't able to generate an IRR derived prefix or AS path filter which excludes the unauthorised included set. Note that this can happen anywhere in the set hierarchy; the unauthorised include may be nested many levels down within the including set used by a peer or upstream, making it difficult to get included set removed.</t>
  <t>A member is added to a set which creates a loop when the set is resolved (set A contains set B which contains set A). This can lead to IRR derived prefix or AS path filters either massively expanding in size, or simply not being resolvable.</t>
  <t>A member is added to a set, that set is intended to contain a network's downstreams, but the included set relates to a peer or upstream, not a downstream. The operator of the including set now becomes a transit provider for the operator of the included set. This can also lead to IRR derived prefix or AS path filters massively expanding in size.</t>
  <t>A member is added to a set which relates to an operator who's actions violate a law, a geo-political agreement, or the connectivity terms and conditions, of a peer or upstream of the including set operator. The peer or upstream has no choice but to exclude the included set from their peer's or downstream's IRR derived prefix or AS path filters. However, this currently requires a custom and potentially manual workaround, as there is no standard mechanism to support this in an automated manor.</t>
  <t>A member is added to a set with whom a peer or upstream of the including set operator already has a direct relation. A regulatory requirement may restrict the peer or upstream from exchanging traffic with the operator of the included set via the including set operator, or via any 3rd party operator.</t>
</list></t>

<t>This document updates the RPSL definition in <xref target="RFC4012"/> by introducing the <spanx style="verb">excl-members</spanx> attribute, which allows the including set operator to exclude aut-nums, as-sets, and route-sets, from the included set, or exclude the included set entirely.</t>

</section>
<section anchor="requirements-language"><name>Requirements Language</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>In this document, the key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>",
"<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>",
and "<bcp14>OPTIONAL</bcp14>" are to be interpreted as described in BCP 14, RFC 2119
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-excl-members-attribute"><name>The <spanx style="verb">excl-members</spanx> Attribute</name>

<t>The <spanx style="verb">excl-members</spanx> attribute is defined for the as-set class and route-set class.</t>

<section anchor="the-as-set-class"><name>The as-set Class</name>

<t>The new <spanx style="verb">excl-members</spanx> attribute on the as-set class uses almost exactly the same syntax as the existing <spanx style="verb">members</spanx> attribute from <xref section="5.1" sectionFormat="of" target="RFC2622"/>, in that one or more RPSL primary keys of an aut-num or as-set may be specified. The only difference is that when an as-set is specified in <spanx style="verb">excl-members</spanx>, the as-set primary key <bcp14>MUST</bcp14> be prefixed with a registry name and a double colon (e.g., <spanx style="verb">SOURCE::</spanx>). This requirement is to ensure that the correct object is being excluded due to the inherent ambiguity of as-set primary keys in the existing IRR ecosystem (as documented in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>).</t>

<dl newline="true">
  <dt>Attribute:</dt>
  <dd>
    <t><spanx style="verb">excl-members</spanx></t>
  </dd>
  <dt>Value:</dt>
  <dd>
    <t>list of ([<spanx style="verb">as-number</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">as-set-name</spanx>])</t>
  </dd>
  <dt>Type:</dt>
  <dd>
    <t>optional, multi-valued</t>
  </dd>
</dl>

</section>
<section anchor="the-route-set-class"><name>The route-set Class</name>

<t>The new <spanx style="verb">excl-members</spanx> attribute on the route-set class uses similar syntax as the existing <spanx style="verb">members</spanx> attribute from Sections <xref target="RFC2622" section="5.2" sectionFormat="bare"/> and <xref target="RFC2622" section="5.3" sectionFormat="bare"/> of <xref target="RFC2622"/>, in that one or more RPSL primary keys of an aut-num, an as-set, or route-set may be specified. What is different is that <spanx style="verb">excl-members</spanx> doesn't accept IPv4/6 address prefix ranges because they can already be filtered using a filter-set. In the case that an as-set or route-set is specified in <spanx style="verb">excl-members</spanx>, the set primary key <bcp14>MUST</bcp14> be prefixed with a registry name and a double colon (e.g., <spanx style="verb">SOURCE::</spanx>). This requirement is to ensure that the correct object is being excluded due to the inherent ambiguity of as-set and route-set primary keys in the existing IRR ecosystem (as documented in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>).</t>

<dl newline="true">
  <dt>Attribute:</dt>
  <dd>
    <t><spanx style="verb">excl-members</spanx></t>
  </dd>
  <dt>Value:</dt>
  <dd>
    <t>list of ([<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">route-set-name</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">as-set-name</spanx>] or [<spanx style="verb">as-number</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">route-set-name</spanx>][<spanx style="verb">range-operator</spanx>])</t>
  </dd>
  <dt>Type:</dt>
  <dd>
    <t>optional, multi-valued</t>
  </dd>
</dl>

</section>
<section anchor="attribute-validation"><name>Attribute Validation</name>

<t>When an authoritative IRR registry processes the creation or update of an as-set or route-set object with the <spanx style="verb">excl-members</spanx> attribute present, it <bcp14>MUST</bcp14> validate the contents of the attribute.</t>

<section anchor="registry-scoped-keys-only"><name>Registry Scoped Keys Only</name>

<t>All primary keys in <spanx style="verb">excl-members</spanx> <bcp14>MUST</bcp14> have a registry scope provided, with the exception of an aut-num primary key.</t>

<t>By requiring registry scoped as-set and route-set keys to be used in the <spanx style="verb">excl-members</spanx> attribute, it becomes possible to have multiple references to the same RPSL primary key. This is not permitted, and IRR registry software <bcp14>MUST</bcp14> reject this:</t>

<figure title="Invalid object fragment using multiple registry prefixes with the same RPSL primary key"><sourcecode type="rpsl"><![CDATA[
excl-members: RIPE::AS-EXAMPLE, ARIN::AS-EXAMPLE
]]></sourcecode></figure>

<t>The IRR registry software <bcp14>MUST</bcp14> verify that without their registry prefix, all references from <spanx style="verb">excl-members</spanx> are unique.</t>

<t>If allowed, the attribute <spanx style="verb">excl-members: RIPE::AS-EXAMPLE, ARIN::AS-EXAMPLE</spanx> would refer to two different set objects, whereas the <spanx style="verb">(mp-)members</spanx> attribute can only contain one instance of <spanx style="verb">AS-EXAMPLE</spanx>, which creates ambiguity regarding which set the exclusion refers to, when sets exist in multiple registries with the same primary key.</t>

<t>Similarly, the IRR software <bcp14>MUST NOT</bcp14> allow for the registry scopes in the <spanx style="verb">excl-members</spanx> attribute and the <spanx style="verb">src-members</spanx> attribute to be mixed, when both attributes are populated on the same set object, and when they referencing the same primary key with the registry scope removed.</t>

<figure title="Invalid object fragment using different registry prefixes with the same RPSL primary key across attributes"><sourcecode type="rpsl"><![CDATA[
member: AS-EXAMPLE
src-members: ARIN::AS-EXAMPLE
excl-members: RIPE::AS-EXAMPLE
]]></sourcecode></figure>

<t>If allowed, due to the presence of the <spanx style="verb">src-members</spanx> attribute, ARIN::AS-EXAMPLE is included instead of AS-EXAMPLE (<spanx style="verb">src-members</spanx> is taking preference over <spanx style="verb">members</spanx>), and the <spanx style="verb">excl-members</spanx> attribute value RIPE::AS-EXAMPLE wouldn't match the <spanx style="verb">src-members</spanx> value.</t>

</section>
<section anchor="any-primary-key-and-registry-scope"><name>Any Primary Key and Registry Scope</name>

<t>The IRR software <bcp14>MUST NOT</bcp14> require that the primary key of an entry in the <spanx style="verb">excl-members</spanx> attribute is also a direct member of the object being created or updated. The <spanx style="verb">excl-members</spanx> attribute is used to exclude objects anywhere in the hierarchy, starting from the point of definition, moving downwards within the hierarchy. This is because the object to be excluded, might be being included by a member, of a member, of a member, for example.</t>

<t>When creating or updating an object with the <spanx style="verb">excl-members</spanx> attribute, the authoritative IRR software <bcp14>MUST NOT</bcp14> require that the registry scope which precedes the object primary key, is a registry the IRR software knows to be a valid registry. An authoritative IRR server may have it's content mirrored to resolver IRR servers, which have visibility of many more registries.</t>

</section>
</section>
</section>
<section anchor="exclusion-logic"><name>Exclusion Logic</name>

<section anchor="the-as-set-class-1"><name>The as-set Class</name>

<t>When the <spanx style="verb">excl-members</spanx> attribute is populated on an as-set object, the primary keys stored in the attribute reference aut-nums or as-sets that <bcp14>MUST NOT</bcp14> be resolved by a resolving IRR server, when recursively resolving the members of that as-set object.</t>

<t><list style="numbers" type="1">
  <t>This exclusion applies to the <spanx style="verb">members</spanx> attribute of the as-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">members</spanx> attribute of all recursively resolved as-sets within that set. Because the RPSL primary keys stored in the <spanx style="verb">excl-members</spanx> attribute have a registry scope prepended, the primary keys in the <spanx style="verb">members</spanx> attribute <bcp14>MUST</bcp14> be checked against all keys in the <spanx style="verb">excl-members</spanx> attribute with the registry scope removed.</t>
  <t>This exclusion applies to the <spanx style="verb">src-members</spanx> attribute (as defined in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>) of the as-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">src-members</spanx> attribute of all recursively resolved as-sets within that set. In this case the registry scoped RPSL primary keys in <spanx style="verb">src-members</spanx> <bcp14>MUST</bcp14> match a registry scoped key in <spanx style="verb">excl-members</spanx> exactly, without the registry scope having being removed from either of the two keys being compared.</t>
  <t>If both <spanx style="verb">members</spanx> and <spanx style="verb">src-members</spanx> are defined on an as-set object, and the same key exists in both attributes when the registry scope is removed from the <spanx style="verb">src-members</spanx> entry, the key from <spanx style="verb">src-members</spanx> with the registry scope prepended <bcp14>MUST</bcp14> be compared against all entries in <spanx style="verb">excl-members</spanx>. Matching keys in <spanx style="verb">src-members</spanx> takes precedence over matching keys in <spanx style="verb">members</spanx>.</t>
</list></t>

<t>The figure below shows IRR data in its raw an unresolved state:</t>

<figure title="An example as-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2, AS65001
source: ARIN

as-set: AS-EXAMPLE-2
members: AS65002, AS-EXAMPLE-3
excl-members: RIPE::AS-EXAMPLE-4, AS65005, AS65002
source: RIPE

as-set: AS-EXAMPLE-3
members: AS65003, AS65005, AS-EXAMPLE-4
src-members: RIPE::AS-EXAMPLE-4
source: RIPE

as-set: AS-EXAMPLE-4
members: AS65004
source: ARIN
]]></sourcecode></figure>

<t>The figure below shows the result from a resolving IRR server having resolved the members of set <spanx style="verb">AS-EXAMPLE-1</spanx> when the <spanx style="verb">excl-members</spanx> logic is applied:</t>

<figure title="AS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS65001, AS65003
]]></sourcecode></figure>

<t><list style="symbols">
  <t>It can be seen that <spanx style="verb">excl-members</spanx> took effect on the object it was defined, not just it's descendants. This is shown by AS65002 not being included in the final result because AS65002 is both a <spanx style="verb">member</spanx> <em>and</em> <spanx style="verb">excl-members</spanx> of AS-EXAMPLE-2.</t>
  <t>AS-EXAMPLE-4 is excluded even though AS-EXAMPLE-4 is defined in ARIN and RIPE::AS-EXAMPLE-4 is specified in <spanx style="verb">excl-members</spanx> on AS-EXAMPLE-2. This is because the AS-EXAMPLE-4 entry in the <spanx style="verb">members</spanx> attribute of AS-EXAMPLE-3 is ambiguous, but a <spanx style="verb">src-members</spanx> attribute has been defined which takes precedence over <spanx style="verb">members</spanx>. The exclusion is applied against the <spanx style="verb">src-members</spanx> attribute of AS-EXAMPLE-3 (which may be an as-set not displayed here or a non-existing set).</t>
</list></t>

</section>
<section anchor="the-route-set-class-1"><name>The route-set Class</name>

<t>When the <spanx style="verb">excl-members</spanx> attribute is populated on a route-set object, the primary keys stored in the attribute reference aut-nums, or as-sets, or route-sets, that <bcp14>MUST NOT</bcp14> be resolved by a resolving IRR server, when recursively resolving the members of that route-set object.</t>

<t><list style="numbers" type="1">
  <t>This exclusion applies to the <spanx style="verb">(mp-)members</spanx> attributes of the route-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">(mp-)members</spanx> attributes of all recursively resolved route-sets and as-sets within that route-set. Because the RPSL primary keys stored in the <spanx style="verb">excl-members</spanx> attribute have a registry scope prepended, the primary keys in the <spanx style="verb">(mp-)members</spanx> attributes <bcp14>MUST</bcp14> be checked against all keys in <spanx style="verb">excl-members</spanx> attribute with the registry scope removed.</t>
  <t>This exclusion applies to the <spanx style="verb">src-members</spanx> attribute (as defined in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>) of the route-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">src-members</spanx> attribute of all recursively resolved route-sets and as-sets within that route-set. In this case the registry scoped RPSL primary keys in <spanx style="verb">src-members</spanx> <bcp14>MUST</bcp14> match a registry scoped key in <spanx style="verb">excl-members</spanx> exactly, without the registry scope having being removed from either of the two keys being compared.</t>
  <t>If both <spanx style="verb">(mp-)members</spanx> and <spanx style="verb">src-members</spanx> are defined on a route-set object, and the same key exists in both attributes when the registry scope is removed from the <spanx style="verb">src-members</spanx> entry, the key from <spanx style="verb">src-members</spanx> with the registry scope prepended <bcp14>MUST</bcp14> be compared against all entries in <spanx style="verb">excl-members</spanx>. Matching keys in <spanx style="verb">src-members</spanx> takes precedence over matching keys in <spanx style="verb">(mp-)members</spanx>.</t>
</list></t>

<t>The figure below shows IRR data in its raw an unresolved state:</t>

<figure title="An example route-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
route-set: RS-EXAMPLE-1
members: 192.0.2.0/25, RS-EXAMPLE-2
source: ARIN

route-set: RS-EXAMPLE-2
mp-members: 2001:db8::/33
mp-members: RS-EXAMPLE-3, RS-EXAMPLE-4
src-members: RIPE::RS-EXAMPLE-3, RIPE::RS-EXAMPLE-4
excl-members: RIPE::RS-EXAMPLE-4
source: RIPE

route-set: RS-EXAMPLE-3
members: 192.0.2.128/25, RS-EXAMPLE-4
source: RIPE

route-set: RS-EXAMPLE-4
members: 2001:db8:8000::/33
source: ARIN
]]></sourcecode></figure>

<t>The figure below shows the result from a resolving IRR server having resolved the members of set <spanx style="verb">RS-EXAMPLE-1</spanx> when the <spanx style="verb">excl-members</spanx> logic is applied:</t>

<figure title="RS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: RS-EXAMPLE-1
members: 192.0.2.0/25, 2001:db8::/33, 192.0.2.128/25
]]></sourcecode></figure>

<t><list style="symbols">
  <t>It can be seen that <spanx style="verb">excl-members</spanx> took effect on the object it was defined on, not just it's descendants. This is shown by 2001:db8:8000::/33 not being included in the final result because RS-EXAMPLE-4 is both a <spanx style="verb">member</spanx> <em>and</em> <spanx style="verb">excl-members</spanx> of RS-EXAMPLE-2.</t>
  <t>Even though RS-EXAMPLE-4 is excluded by RS-EXAMPLE-2, it was also included by RS-EXAMPLE-3, but still 2001:db8:8000::/33 is excluded. This shows that the exclusion logic applies from the point in the hierarchy where it is defined, all the way down, taking precedence over any subsequent includes.</t>
  <t>RS-EXAMPLE-4 is excluded even though RS-EXAMPLE-4 is defined in ARIN and RIPE::RS-EXAMPLE-4 is specified in <spanx style="verb">excl-members</spanx> on RS-EXAMPLE-2. This is because the AS-EXAMPLE-4 entry in the <spanx style="verb">(mp-)members</spanx> attribute of RS-EXAMPLE-3 is ambiguous due to the lack of <spanx style="verb">src-members</spanx> attribute on RS-EXAMPLE-3. This means that the <spanx style="verb">excl-members</spanx> value RIPE::RS-EXAMPLE-4 has to be checked against the <spanx style="verb">members</spanx> attribute on RS-EXAMPLE-3 with the registry scope removed.</t>
</list></t>

</section>
<section anchor="cumulative-excludes"><name>Cumulative Excludes</name>

<t>As as-set or route-set objects are recursively resolved and <spanx style="verb">excl-members</spanx> attributes are discovered, the RPSL primary keys to be excluded need to be tracked. At any point in the hierarchy where <spanx style="verb">excl-members</spanx> is discovered, all <spanx style="verb">(mp-)members</spanx> and <spanx style="verb">src-members</spanx> attributes from that point onwards are subject to the <spanx style="verb">excl-members</spanx> which have been discovered so far. However, depending on the resolution algorithm being used by the resolving software i.e., a depth first search or breadth first search, multiple lists of RPSL keys to exclude may have to be maintained (the exact implementation details are outside the scope of this document).</t>

<t>This section does not aim to define how the logic should be implemented in software, simply to demonstrate that the exclusion list is cumulative, but not as simple as a single global list.</t>

<t>The following figure shows as-set objects in their unresolved state:</t>

<figure title="An example as-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2, AS-EXAMPLE-3
excl-members: RIPE::AS-EXAMPLE-4

as-set: AS-EXAMPLE-2
members: AS-EXAMPLE-4
excl-members: RIPE::AS-EXAMPLE-5

as-set: AS-EXAMPLE-4
members: AS65004

as-set: AS-EXAMPLE-3
members: AS-EXAMPLE-5
excl-members: AS65006

as-set: AS-EXAMPLE-5
members: AS65005
]]></sourcecode></figure>

<t>The following figure shows the resolved members of as-set AS-EXAMPLE-1:</t>

<figure title="AS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS65005
]]></sourcecode></figure>

<t><list style="numbers" type="1">
  <t>The resolving process starts by resolving the members of AS-EXAMPLE-1.</t>
  <t>If a depth first search approach is taken by the IRR software, AS-EXAMPLE-2 might be resolved next. AS-EXAMPLE-4 is not included due to the <spanx style="verb">excl-members</spanx> attribute defined on AS-EXAMPLE-1. This is being applied from the point of definition onwards, the resolving process inherited the currently defined list of excludes (RIPE::AS-EXAMPLE-4) when it moved on to resolve AS-EXAMPLE-2.</t>
  <t>AS-EXAMPLE-2 defined a new <spanx style="verb">excl-members</spanx> attribute with the value RIPE::AS-EXAMPLE-5 however, there is nothing left to resolve in AS-EXAMPLE-2 so this exclusion has no effect.</t>
  <t>Continuing the depth first search approach, the IRR software returns to AS-EXAMPLE-1, and uses the exclusion list as it existed whilst resolving AS-EXAMPLE1-1 (it contains only RIPE::AS-EXAMPLE-4), and now begins to resolve AS-EXAMPLE-3.</t>
  <t>AS-EXAMPLE-3 includes AS-EXAMPLE-5. This is not excluded even though the IRR software has encountered an <spanx style="verb">excl-members</spanx> attribute which contains the value RIPE::AS-EXAMPLE-5. This is because that <spanx style="verb">excl-members</spanx> attribute was found on a different branch of the hierarchy.</t>
  <t>Continuing the resolution process, resolving AS-EXAMPLE-5 returns AS65005 only. The exclusion of AS65006 defined on AS-EXAMPLE-3 was applied to the resolution of AS-EXAMPLE-5 in addition to the exclusion of RIPE::AS-EXAMPLE-4, however no <spanx style="verb">members</spanx> or <spanx style="verb">src-members</spanx> attributes were found on AS-EXAMPLE-5 with these values.</t>
</list></t>

<t>The example shows that discovered exclusions do not apply across branches of the hierarchy. This <bcp14>MUST NOT</bcp14> be allowed by the software implementation. If allowed, the operator of an as-set or route-set would be able to excluded objects from other sets they are not responsible for.</t>

</section>
</section>
<section anchor="backwards-compatibility"><name>Backwards Compatibility</name>

<t>The behaviour or RPSL compliant software is to ignore unrecognised attributes. This means that adding the exclusion logic defined in this document based on the contents of a new attribute has no impact when existing IRR software implementations process an object with the new attribute defined.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This memo includes no request to IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document adds the ability to specify that IRR derived prefix and AS path filter lists may exclude specific entries, which may be the cause of security issue, that are presently included by the existing greedy logic.</t>

<t>It is possible that the operator of an including set includes the wrong primary key in the <spanx style="verb">excl-members</spanx> attribute. However, this is not a new issue, it has long been possible to include the unintended primary keys in set objects. This document doesn't change this existing behaviour.</t>

<t>Great progress has been made with the deployment of Route Origin Authorizations (ROAs) as defined in <xref target="RFC9582"/>, and the ongoing development of Autonomous System Provider Authorization (ASPA) objects as defined in <xref target="draft-ietf-sidrops-aspa-verification"/>. The method proposed in this document in intended to compliment those existing developments, further enriching the existing operator's toolkit, and not work against them or be mutually exclusive.</t>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC2622">
  <front>
    <title>Routing Policy Specification Language (RPSL)</title>
    <author fullname="C. Alaettinoglu" initials="C." surname="Alaettinoglu"/>
    <author fullname="C. Villamizar" initials="C." surname="Villamizar"/>
    <author fullname="E. Gerich" initials="E." surname="Gerich"/>
    <author fullname="D. Kessens" initials="D." surname="Kessens"/>
    <author fullname="D. Meyer" initials="D." surname="Meyer"/>
    <author fullname="T. Bates" initials="T." surname="Bates"/>
    <author fullname="D. Karrenberg" initials="D." surname="Karrenberg"/>
    <author fullname="M. Terpstra" initials="M." surname="Terpstra"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>RPSL allows a network operator to be able to specify routing policies at various levels in the Internet hierarchy; for example at the Autonomous System (AS) level. At the same time, policies can be specified with sufficient detail in RPSL so that low level router configurations can be generated from them. RPSL is extensible; new routing protocols and new protocol features can be introduced at any time. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2622"/>
  <seriesInfo name="DOI" value="10.17487/RFC2622"/>
</reference>
<reference anchor="RFC4012">
  <front>
    <title>Routing Policy Specification Language next generation (RPSLng)</title>
    <author fullname="L. Blunk" initials="L." surname="Blunk"/>
    <author fullname="J. Damas" initials="J." surname="Damas"/>
    <author fullname="F. Parent" initials="F." surname="Parent"/>
    <author fullname="A. Robachevsky" initials="A." surname="Robachevsky"/>
    <date month="March" year="2005"/>
    <abstract>
      <t>This memo introduces a new set of simple extensions to the Routing Policy Specification Language (RPSL), enabling the language to document routing policies for the IPv6 and multicast address families currently used in the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4012"/>
  <seriesInfo name="DOI" value="10.17487/RFC4012"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9582">
  <front>
    <title>A Profile for Route Origin Authorizations (ROAs)</title>
    <author fullname="J. Snijders" initials="J." surname="Snijders"/>
    <author fullname="B. Maddison" initials="B." surname="Maddison"/>
    <author fullname="M. Lepinski" initials="M." surname="Lepinski"/>
    <author fullname="D. Kong" initials="D." surname="Kong"/>
    <author fullname="S. Kent" initials="S." surname="Kent"/>
    <date month="May" year="2024"/>
    <abstract>
      <t>This document defines a standard profile for Route Origin Authorizations (ROAs). A ROA is a digitally signed object that provides a means of verifying that an IP address block holder has authorized an Autonomous System (AS) to originate routes to one or more prefixes within the address block. This document obsoletes RFC 6482.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9582"/>
  <seriesInfo name="DOI" value="10.17487/RFC9582"/>
</reference>

<reference anchor="draft-romijn-grow-rpsl-registry-scoped-members" target="https://datatracker.ietf.org/doc/draft-romijn-grow-rpsl-registry-scoped-members/">
  <front>
    <title>Registry scoped members for RPSL set objects</title>
    <author initials="S." surname="Romijn" fullname="Sasha Romijn">
      <organization>Reliably Coded</organization>
    </author>
    <author initials="J." surname="Bensley" fullname="James Bensley">
      <organization>Inter.link GmbH</organization>
    </author>
    <date year="2025" month="February" day="21"/>
  </front>
  <format type="HTML" target="https://www.ietf.org/archive/id/draft-romijn-grow-rpsl-registry-scoped-members-01.html"/>
  <format type="TXT" target="https://www.ietf.org/archive/id/draft-romijn-grow-rpsl-registry-scoped-members-01.txt"/>
</reference>
<reference anchor="draft-ietf-sidrops-aspa-verification" target="https://datatracker.ietf.org/doc/draft-ietf-sidrops-aspa-verification/">
  <front>
    <title>BGP AS_PATH Verification Based on Autonomous System Provider Authorization (ASPA) Objects</title>
    <author initials="A." surname="Azimov" fullname="Alexander Azimov">
      <organization>Yandex</organization>
    </author>
    <author initials="E." surname="Bogomazov" fullname="Eugene Bogomazov">
      <organization>Qrator Labs</organization>
    </author>
    <author initials="R." surname="Bush" fullname="Randy Bush">
      <organization>IIJ &amp; Arrcus</organization>
    </author>
    <author initials="K." surname="Patel" fullname="Keyur Patel">
      <organization>Arrcus</organization>
    </author>
    <author initials="J." surname="Snijders" fullname="Job Snijders">
      <organization></organization>
    </author>
    <author initials="K." surname="Sriram" fullname="Kotikalapudi Sriram">
      <organization>USA NIST</organization>
    </author>
    <date year="2025" month="March" day="23"/>
  </front>
  <format type="HTML" target="https://www.ietf.org/archive/id/draft-ietf-sidrops-aspa-verification-22.html"/>
  <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-sidrops-aspa-verification-22.txt"/>
</reference>


    </references>

</references>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+1d+XIcx3n/f5+iQ1WFgGt3iYsKBTt2ljQkQeIBA5Rllctl
9M707rY4O7OengG4UinPkmfJk+U7unu651gApHwlcVUiYDDTx3f+vqObk8lk
ZCqZp3+WWZGrU1GVtRpVusrg57P3m0wn8PNWqPdJVqc6X4pi/r1KKiMWZbEW
lxdXL4VRlRnJ+bxUNw/7Ji2SXK5horSUi2oyV7nJ1HZSbkw24Y/VZK3Wc1Wa
ycHBKJUVvHt0cPR0cjw5Ohkl8PuyKLenQueLYqQ3JS3fVEcHB58dHI1MPV9r
Y3SRV9sNfHl+9vbzkayrVVGejsRkJOB/Ojen4qupeM5z0zNe01fw/030vCiX
Mtc/yApGhNHySpXTTOfvxBfr+Zf0hlpLnZ2K7/HT/9D+BfqbqUqlqlPxvHi/
kkuVq1JcVeVUPDugPwPJYCPPVQkf8IMihVU8Ojw4Onn6yD6p8wq3+4Uq1zLf
jvIC/lvpGwXbEZefvzg6PPzM/fjp0ZH98eTgEH5EEsVvf/b0Gb3CxAfO6O/z
ybIsbpkBpVpqWPN2YpJio1LHiFNaSiXLJW5mVVUbc/rkCbBGVqVM3sGOtaoW
U6DVE2Dvk4cN/oQHZ+m7tO8IfkfYdwTsw8uQkyz6zrOW/jex/7U8vpqKS1qF
f8xsvpJmJdt/gtXj/JmWc5DjF8CJtH/UluTskh4/bp/gBKJ9cDQ5OqSHzDC3
ny/fvnrZEPz29rYhtCyTFfD1iU4fSO/JweF0Va0zO8XbP7z9a8xQva+8mOGI
E6PTstiYiTQbOblRpV7ohLXqQ4Rr95CRSD3/4kLMrv58MXv7pfh98JJ4Lg1I
GPwwq6siL9ZFbcTV1lRqLS7K4kanoK0zEi+r/2JvdnUx2xdv7it/s6mY/aDX
xU1LUGaZeg/mF8eP/0yy8h3+6X3/iGcge8WyWMsfOoOe1Whgev5Mg/6ulBXo
0Es5N/0jX8LItVm1Br2EtWzjP7A8n38l/lXMyjKpB8b7eiouQMCz1oBfq21d
tv5CI+4aCzTuKtffA8FMW+WKefdPON7goq5KXcp1e1VFpd/JTG7AdbXfoNV9
czUTr8+v3nYUF5zS8Ucq7m5ZnhwdfaC63j0uKuloMpkIkApUNvjt7UobAXpW
r1VeiXqDezXixx+te/npJwESwb+jj4Hf51uRqoXO0edXKyWu0Ys7U3AtZFWV
el5XCjVNmgkacByiLOAZ/ZZk0hiYROf0/SX8Ace6KABTbMXVRiWNzr6U+bIG
Tyr20BvsTwWtN1e3wTwyy4pbI8AikcwbURWigK0nxVqJTK91RWPBGwuaUL0H
I4Yzmm1eyfdjcbvSyUokdVkCDcAXFDn8P1NvNkUJeAY/0WsGPLBmQCyINnAw
BZNsqxUOlQD+kDoH+3Kr8Qls2W0etNDvfcrkX+s0zdRo9An6ibJI6wQXiMx4
GDkiPhFTFK93F92RhsooQmcigXUqWDGYplItFBAgga9FqkuweNYbO7rhGHum
BlJJg/ubXYm8xhfG4vxCbOB7DcRUVTLdH+OuZZpqXLXMeC4mM4y0Niq7gZWu
5I3C3zVMcZvHk+IM6ZMiXNYW5l8XJa98DMMjJAQ5rOo1qLkqgRu04yTTKMum
WFS3El7HPS4KFBKcDHbuhyRRgUnr0oAmAdNLZQpYGooUbdmtBSggaf96qqZj
ARBNZ/RSMBTtZq5U7kZJRabkDfKSv4VBmEjwMmxsdgW8ABn4BOC0FchXCpxL
StOdO0FjqfAyy6CIBNcJPmKlcKG9koc7nQPpWJwU0k6s66zSm0yJW7kFzDc6
nA4K1HVXv6dkoeibK0UCLJ5OD3EFfUPIitbZLK5CRW6U2IDmIl3Ao+F2kM2b
Uq8lQMN3agvsVhKEx5GbiJqjM56ACOIXOLbdNXnr7uoMLO+IBOTp9DheJj7s
WWtIvXi1a7nlFT9owcF4vEirEsWG1QQEcIWqJUpQc+UNmpCbjQKIkI6DPbOG
OWoC7sgAcOYE/bPteIhnZJODZTT7gKHOL25OUGmBD8ZKql0JayYsj8U/L9C0
sCgGe2bKbQqIiUzzCWpYQVPTlsdEbH4znALIWyM8g9cBiIF+Lbawuioh6xoO
QPYLvu5dKO4noibq8hA5p6NIeE9AOlgqrKOL5X/T5+IWoYoZ653+/mLConE3
P4M3P939JgnYqqiXK+K+ahIABrwrmxNLuTF5S4V4Iva7/TR0hpPAOXjYwqIC
Vk4LNYhBKDhk8lBM0Ml5OoPQyMwUltb0eVs20TCy5hgeyDDLdhu9OQQ38y3E
PYtr+sqq1KRYhDv4aEuITikgCG2SXiLsEUIOvwcLnngIIPmCaZyUGuyAlna+
1IOsz18IjEZRwOZFtQqnqwqIxBABgOyuVY/lJMN5x24iW3n//dBXfjd+jJ95
Q9Fmjoe1nOYvP2WkJDBZtiQ8F5rTmPcsrtKCq7EVLSSHMuBdx6GP7t/8pz5x
piPb3EOCUmWSQADI+31lM6TbDoY6So2+XQGAgRU6cL8HSrvfY/nQTueUvRsC
HHvAAaVziEwU7/2R/SBFNPRoHyM0TZ8XxKyHjEHoHQchAofoxxPZziMQAfoH
VniiQazVxrACLBvFC+yHQgDo3RmICps7Wnt7trEA4kRLCtGlf9PBS8BdEHvd
5o3JWmkw5hDYbd2qXODhxwlEKCuWOsGFM5XYi5S8eBDCR8tSqXT7iN8D3p7z
RAu9rEuEqiCZ4zBcuJ5dTc7+MHt18fJscnjNYZBdMyMzGw/AHsehlDPdQQlQ
bLJghWMRjgj0vXWBkg1TnDWbXX369ODgcGx/OGJF4l+OAZn+J/xPYApqxEs9
jQYeubRl+PRo1PfuUfhue87gvePer4/bXx/TykY/nnLy6d8fz2BfQHVA/sDx
hpvIpKRU5CnhL8gH8qURebr0DiIoXs3jnzgcMHLdFQTw/xD5UEwTmmMGD0Gg
4hQuMDXOjaAld/jS6koPivxlGPkOakKvkLMYo4gClcYikPBQPwBBFj2KOhpd
gXZmsoR3WbbdztH5B9v3YVZVFL/cbccosmuI5ckv8y0/ftKy0kxOgqY0MqKs
JwPoCYXYobYWWhuO/M7eR5HfQiOybwJ4tvX8NNwI2rkBW38S2fqpeFGAlTCb
IkfKNtHCZtId9RbUHJwOSEvv2EfTpy3UDHbLed8ODthwlhUIvqbtkldMFWyr
ZEligl5eCpUUhjOz+MSzU4L5rW6L8h14ZZAuikOSRG1QNGZeV/yOiOfdPSEq
h1DYhRu2CLWL201o70V0vqU5IjF0OPd+stb4HYgAtLrhQRe6NFUg95Rk+CvK
oVfzwUV3oBkHcJTnWBec3xhSFqoFUuxsPcXfbNUL6+qc8oCEfO5zBCbOjDli
gkQ8CPePO8iTM1qF83Lw30DTxI3MauWjxAz8QYopp7ROLP4kaUI0GkOZxsZP
xXlFEkMGz46wKYzR84wmXtSlTebhqK1B7cyYDwP5D6UuWQF5HeajZeICYjoQ
L2evv2P/koHhwndsQimxmxu7tN1824hHADEidBfGZ1ZSGn/TxtmLVsKnR96m
ZDFLSiY02dy8cOYmUHab8wzzKR7GshsMJZ7FA23hR+t/P1b26wefgEb/NYxK
1rGxao1fAPuNWeOslRl88FJ6VWGMFWgI39Mm8AH8PdeZrrYcZzMUBxLTTGMS
J6vdIPE3YMuxsFbn4EU1glG1WLAtwCydy9FPxQwYk0/U+5WsDWatvER5cbZD
SPwZ1ofpfGMTuTZbOXOIFFUiTS3yFQ3qsaAe1DGHNfDfKaecyQDkO6fCq2uY
C6ClyX73xQw2uOv82X5Jk2nQKxg0wCQrEHfw1vnjylYTtXErsy9PxTcbbCWQ
NlmxUUF041d760sw0eRjP7i1CdSHgEvATA841xSCSdR7a2wpFS02ErjN5tLS
zqoKb6/Og6WGOG8qXhcYDiL8r5x1WVEqCt3CLetj7gsIHhL/cnBc56BtqIVd
EIynDeNIW2HpUp08OvBOEsFwY7Ul4xhGoVQBRFIpxNU6QXEl2lTRdthoYW7w
XvLFmB6BSVYUG3iomp2y0+NCwB4+mDXBD/763I0RPpztB0Y6A/OOM96HacaZ
tDVgRA431fuNZMcD1DL6B0WGzSDg3pJazBUlV2mRKCx3bXpsozzeHLa+5PbP
zt95gPaYeWWFmMPiTmjOamgDli7LCN4Fw1DhqoEAfXpJIeZcsamQEGRIiE4q
BzxLn4bpH8RJtGcAudmHcWEH+e8pUyFV8malt6viMUJFTqne6CIjlQZ0DkG8
BEEuJpsCrLROMFpEZ4AZWGI5JZHYBOobsuOqtJYlQWhCQ44ZnrbZ0E9mH8UQ
SzrfYHoa3G6yKjSAEOJ943o7YuBcvy5ppMdUHWvYDr/fi/RT8WVxi4Hp2Boi
jwBK9ZdalyQRCTgbmI2MKtitvNKUTwcbUwPZUHIl+MI8pfxG5cBEjqll+EaW
2KGEYEmbNe7JFol5Qlv1rWECaQ0XxXl3MB3dLDB3/WDiewDI1QBbPuUkYZHj
pKVa1hm+6mlAVX60r0AOwAIJa2VnXmIJMMzDwlKi0WwwwS4FAuGUO5ZNIomv
oF0/BopuZFltw8C4vyfB58iCkgAFo1FrgrYF9bu6ExyoG3bhboeB6Lp8lUuY
2IRviJ48jo2TITDOoPyjFALXtgz/LhtGGV/vZ6iHOBlENDXi0atvrt4+GvN/
xes39PPl2e++Ob88+y3+fPXl7OVL/8PIvnH15ZtvXv62+an58sWbV6/OXv+W
P4anIno0evRq9t0j3uyjNxdvz9+8nr18xG49ZBXmILjOTH2RoKqoB9KMAEYk
QHdOHzx/cfHf/3V4Apz7F9vPCKzjX54d/tsJ/IJ+lGejnBj/irhphMBCUviH
gXEiN7oCI03aalYIDlBlgZC/+CNS5k+n4lfzZHN48mv7ADccPXQ0ix4SzbpP
Oh8zEXse9UzjqRk9b1E6Xu/su+h3R/fg4a9+k0FgJyaHz37z6xEHD2DZdV4A
NN/afG/AH06L3FuKRi0pEg+TIhKZUUtkhiREtCVEHJ6MqciD8jHiCh1JCmoJ
eZ2WZs+cZrOuDHYl6aYk4tCAjcia9FqrZ6aJy+ybL/Apz4OtSLs6oDrj14Yq
YuvCYBlVco3cpXRdYwcbJB/a9VXyydAMFxxt/lZWUem5XRY13bjaLtZicN8v
YsEXqiMCaNuSo20JkIBvE9vC46jRJCZQVHMIcwAkhnMfKtkQFKsMtkkYm/e4
xAYyXWN4k4Co52JPTZfTsbi+evPN5Yuz09Nrh6JDr6cJUqnc1KWPVxRnaBJf
aYeXGBVba52KtFbCZ6PRuqCdW8/1skYk5ePomKo2PPEMjHOae7LRSZdRfVjH
7U8/7YNQ/nh6YzYyUT+NvPCfjk5b1A5f+z3maPAVF2vv/fEals9dXNd/Qvb/
8dpPidS+/tPpKb0DW7QP9sMR32LTPQzo8nRjbiqaUDYo9XrTKNQDVaeliaw9
hqsAH64tw61AH6Q27dxR3F8Ta9G3ODbaIKtEldehFinSQhmK4inBvStRiiKb
SJu83NrAhZHh3KVAQcy4qCvDnKiwFcFEGqsSA/mp+yj0/yptjr3AP6tu96iy
35R9dj+d57fuYyra48MTlNGJg9MPtx9+/wK2qFPJrbLfOo/D6aOKOt+IF16+
IOpPFHUacxeF4h5ainMwpLgzHxv0fgyZKRBuQ8hKVyzwN7xG5YLuinC8jZKC
3knY2SfN6ZcrPv3yNcrXG/Cxo9EM4G1b7FqroPlci1t0jsYlPCCM9VuAb9Wm
cm1EjcsPJoFVPXeRImeG4sM5vbpBi2NIV5umxWI47tKVz9CElQvaiO9IjVt0
PT5qG+K4d2OD4LequFEyjYXBdwMT1UpF/EV0HHUXhIs+FZfnF2B+mhr9WMwu
z1+HT9rl//Oc+O/kZ1HKJcewZHuD3XkRtUlhz6bebbqy/44dUau/bcHEwQpO
uOmyPdm43bdMrrHNrhJTs/ovNUrq+cK13Y1jKY6/ug+9riHyqLOUpyfO3haB
KwwOe2F8Dg+tbx+sY6CzI1DqMpDotnWO2ZqEa1jB5ON21tYbfqCRLCn05zds
Gxv7Daq50IpRGMcMdql0Qj4g6qS2xNYdlsZq5vsYxr7kHbMTA8O4bS5WRnOX
nrkqrbg2ZdL3d1bZNXpmu6V2MRMXsyk2NddKLCDjMMXziTXN5b23USNr394b
qrQsVpN3b7SRVx124IyCzZx2tXG3OD5MWRupfKi2AmQrCxP0ARvU31CLAhTC
DiTxFesBdnVViVPwvmEGwIdMcZDgjb14MIRMXAXZNIcq8KBMg5j3x43cDAkW
l4fbxGXFRsDaFPfj6ek76/hm+VZcWIp9jRSDSWNn2Bi8rmJYHNjAvnajb445
tXJ7p474Snr/gRcrGAwhXfuWhw82JN41eLvFxLVFtAtjvig2xjxzSbDSJxKp
oR6X1OQ9ASVxZR2z5ECb1IRFsU4PYRQguF2x/jtgDCPq5Qr3arcbFrqlpYst
EfT+sqAMp8TOb9dFyogLT4ZbktlTG/cFV9bbdADePQSiZVzYqIPUJ8oVNO0i
AsmhbrQASXUM87ucMsVEN8lAz789BZHuWyqfSsIwkPCNrh4bhwqB4mVZ2HZN
Wyksg6/MOOw+utGAlLgKD3SnmiiFpo3DocRY0yTwEqvzA4mrb12dcpfwRqY/
wMnW7rf0znDzvcd/zVDBuTLX7hk04hDLPCPnqqmZkuDxby7MYsJYd9U9t+Wc
TtQOjEFtfDAICzKkGI13D3oHwx6Uno6iaCzPIHNHlOBIGZjXgaYMwmadA2n+
vEKj51yIxaPpjWp38xQxUwYXOBRFKHeipMPt4e5QH/gnK5W8w6UvsbzNbdHR
t0OruRMj3M3AAdBD0XnYyPjg0Pxnl4OBlX6QLLiEv83ntAmY9ggIhpXREoh7
7MPbApGSg+0GojaNPQ4DjzbvVnwS0rUcECNtmZH7FixdMSCghVmvW6w3YHuZ
5wChCKMGQoe9eTEFgzbYXrvlCE/QDfdDIJ4I0QbAvp2jtRdKRQU76PKR4EdT
buEQK3pjSMa9zjVqZEkQ6RFOoFVPVmAqXrlTc/38BQhIrbjkCz0CXHc+8gO6
NuTm0ACV2mxVXlYSX9dAwVLeIr3r3AsqnQ37wPZ915d/ODJFXSaK4f79mvrb
vfy744LJiZvrqT8M4CfFl+95FiAapRk8jlm6k9891Ul7qpOYJu0zCLlDYk72
A3xJvHpsOlxyKYYePrOUUoMfCXK/V3Ya7odteeKeAya3AzDEn2thq54+SIKi
Qx3d8xnhgQtHi5gSrJretfhVIIV+gf23tn/WKJX3Zu6ronhnux5d1Ozy0RU1
kVr7xB1O39eYQsBlYAkUVF/m/iSpdlVtwEJWMIPGrfapJhgUG6WZUw7xu88w
CCDz5jT7WvwZb4RqLz6KICdHU9hyKInCed10+CTLSVhjhbWhjHKE15H9OwoL
dFlLuJregCYaMA78+h1rqMUkZpQHKmrbpyYHnTI6eDoG4HZnrzToNamNBSUE
3mCVRrC9Sb8DCUQL3nM99FTeaRwcCkaqzSaTWxiZwkvqY+Y2W3flhar2p8Nl
uQ8IDDpZ848KDcZBbBDX0sz4bxIr9PRk3402B7KTPu8/cKD7g/DirrkGEWNw
1CE4/BwByOBcyt85pBjc4X0Ci3/qoOLnlJMPiCseJiX/V4KNljjeGXH0GMT/
jznuF3NEpP55Aw/PFMDZvcjx8LOj6cEU/u/JEQD4yzC6iAOQ/pEgBtk0KP8I
MOhpOn92evrk+Dj6S/DJcTRNb5zQerv97KQ3srkcDi76137cpcLh0bM2He43
VhCreCI8Ozg4YErcM2xpNOgfJnK5/Pkil/vIXyRA4xZb2pS7/AcKagRWJx4S
13Sl5KEhzmUroLhvnHPZinPOgnCmPaaPeWDF4Xdjt32qI4VFk1h1Ma4ABA5W
tGe/wfiWQE58ZbsMHZ/0b9WI2vUfYYtMVRCQdc/lj4OqYGSfscZg6rlRf6mp
48oejUdSDZJH7aDhcEjYfvOOkPDyY0LCHSciL4fiwrBgm8nkHTUWDAGsaH3H
dn1rJfOAoa09hSXViBaE/Io+zDsY3sbT36PeDrHgi3qN+BGrVmf21N9oNDM7
WqO4O6A/O40IaQCp8mcQpSYoYS4K6ALFuDgpcsVVMnjGd8SCnswqEtCdkt9a
BrVdNlOjItyN7pqlW21zd5wBqbn0ilsCPXFV1R7+tm8RaFYhwGosZBmcXUoJ
i1HZ1AFBIGzNN2BlS6wvrtbWPLoDj/418mO+YMm3teHVSRs6JoU3CxiFBEKW
zrFFtPV83HSyZIRQUSuQO44rrpLtK5q2jQSE0t5/uccGS6JniO4Bg2XAKxnT
C8TJXxvCAkmQPDissO8OAhnb4Y4NsXwmUNPZKzYnYsXXOlrLCIYT+4vmqpmc
rYgjytgdgKQR1gUeMpOV6rW11NyDB8mcdrAdpzUYHkfxPTj24ptlVszBP+GH
Dr3ScWWq5zM8Ycse1SRc5KvLnzN3/oD0991J9TsQZ/DC0/tmsO/MqQdDxnPy
CJ/2jvC0PVEHLH1cdryfnY3+qTREjnaCkGEPzmV3N/BxaO+Q05GNubBtstx5
YvjihoEMWTi1C5J7zQvMVxaSD+Bj8Jc7KxU2VERSetQ0oPi95Oo93mzZAgeo
fh5oBY55MDsSBOfRBgLkQJ0pNie7q/HG2fxxy+Q6GlJPOd8fBn9vTqC6Jbje
bH+2fq+rjfscXWi87PbGNt75BpFWcv5wGtPQzSN3H67woKC/l2vyFK2qO0rr
z8DyfU+ZWlThgnScokeHVsVpNHsamIMHWjNeYKHz2knYDgHq6Y8sVVWXOXmj
kJ2cZaldu3fLjOPVHRWnXThtn5kq4F8z0CEo1Z6umlP51F3awyWej8+bL3Vu
Bph03GbScXPHVEjxuJO5F093KIGEBbiO/2IEYQm5K/0Z3zWwi/l9kLobEMZ3
RC3w0DSnv5rGyXkpc8Qai1ZbWo8IBCDH6tK4lz0gmo7/1jwSg9olFrJV5CUG
tP+Ygzar8taCBIuIjd1TOnBqr2Jxb0ez9dWUrQ6h7DdIHYDXIMC8RVXzlIzm
dxprlLtFyN3+wq4sCBgDcBl4gLRg3LJB7GMbVJk/TZmi3TgYllrcxavWjjcY
M8J47BHCZvHwoPjAYYtbB9nchSVe+qNrpPjSOts0xleo0Jb4giU+R7Dgi9XE
cwgSGJy/wExmZVvnmGZzhQmfoqYj74RuMd2ZaRleGs7ni/QyL6gVHiKdYpnT
LSXBva+d2A5lxEp0O2aP7i8ND03P3T9LQS4jODEiW/fcWzsKFJeJPXIZHUIa
4Inx3qmn9zKewa6RSHg+ez1DLUWYXvJAFpCD6BaNEcsLar9UhrwCfkWfX2Fo
iN2KvUM0J8bT1F4F2VwxxNG/PcvQc/UDXw0Z3VjDwQoGJS5A8fdS2ay1a6a0
ZVOiNdk2SvDZtWpjamXrjNT9zqd7wqsJrfz33rqEZyUqrpC6cy0uqmipQXzV
gKclpWXKggBF09F8R6Wtfe+FdSEsPXZH4NBQeuhCW4pAw5M37todnKTO/bUu
7cpNELBYwfdcdGcV6b4I5fy/pZBXNyDPF9gSjPK4pFOMvp6+lmmASgAPZMWW
RkbTSpd/v6G7keJ/nwXh05uZ2RftApz9h4/wOKcrvcDOC+qYxouEio0b/KH/
FIzPfvSW/Hb/Cxx0OSIBarqNDKgAXOizCAjqo8t10DrRX+BDEwhfsBm8esLe
/abyUnNhJZJUJ4KP6VrM7J2uHISp6OKTMLVEJ8Exrq+rmi5IsdbsRtl/wWIO
Bnb0PzLczH5YbAAA

-->

</rfc>

