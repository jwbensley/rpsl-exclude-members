<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.26 (Ruby 3.2.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-bensley-rpsl-exclude-members-00" category="info" submissionType="IETF">
  <front>
    <title abbrev="Explicitly excluding objects from RPSL sets">Explicitly excluding objects from RPSL sets</title>

    <author initials="J." surname="Bensley" fullname="James Bensley">
      <organization>Inter.link GmbH</organization>
      <address>
        <postal>
          <street>Boxhagener Str. 80</street>
          <city>Berlin</city>
          <code>10245</code>
          <country>Germany</country>
        </postal>
        <email>james@inter.link</email>
      </address>
    </author>

    <date year="2025" month="March" day="24"/>

    
    
    

    <abstract>


<?line 75?>

<t>This document updates <xref target="RFC2622"/> and <xref target="RFC4012"/> by defining the <spanx style="verb">excl-members</spanx> attribute on as-set and route-set classes in the Routing Policy Specification Language (RPSL). This new attribute allows operators to overcome limitations of the existing syntax, which currently only supports the implicit inclusion of everything contained within an as-set or route-set.</t>



    </abstract>



  </front>

  <middle>


<?line 79?>

<section anchor="introduction"><name>Introduction</name>

<t>The Routing Policy Specification Language (RPSL) <xref target="RFC2622"/> defines the as-set and route-set classes. These sets can either reference a direct member of the set (such as an AS number, IP prefix, etc.), or additional sets which themselves have their own direct members and/or reference yet more sets, ad infinitum. Server and client software can follow these references to recursively resolve all the members of a set i.e., until all references have been resolved leaving a set of prefixes or ASes.</t>

<section anchor="existing-methods-of-inclusion"><name>Existing Methods of Inclusion</name>

<t>The existing RPSL syntax allows for members of an as-set or route-set to be specified in multiple ways:</t>

<t><list style="numbers" type="1">
  <t><xref target="RFC2622"/> defines the <spanx style="verb">members</spanx> attribute.
  <list style="numbers" type="1">
      <t><xref section="5.1" sectionFormat="of" target="RFC2622"/> defines that for an as-set this attribute stores one or more primary keys, each referencing an aut-num or or as-set object.</t>
      <t>Sections <xref target="RFC2622" section="5.2" sectionFormat="bare"/> and <xref target="RFC2622" section="5.3" sectionFormat="bare"/> of <xref target="RFC2622"/> and  defines that for a route-set this attribute may store one or more primary keys, each referencing a route-set object which optionally has a range operator appended, an aut-num, or an as-set. Alternatively, the <spanx style="verb">members</spanx> attribute on a route-set may store an IPv4 address prefix range directly i.e., not an RPSL primary key that points directly to route object, and that prefix range is used to identify matching route objects. That address prefix range may optionally have a range operator appended.</t>
    </list></t>
  <t><xref section="4.2" sectionFormat="of" target="RFC4012"/> defines the <spanx style="verb">mp-members</spanx> attribute for route-sets. This attribute may store one or more primary keys, each referencing a route-set object which optionally has a range operator appended, or an IPv4 address prefix range directly, or an IPv6 address prefix range directly. Although not explicitly stated in RFC4012, implementations of the <spanx style="verb">mp-members</spanx> attributes have based it on the RFC2622 definition and allowed the attribute to also store the RPSL primary key of aut-nums and as-sets.</t>
  <t><xref target="RFC2622"/> defines the <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes.
  <list style="numbers" type="1">
      <t><xref section="5.1" sectionFormat="of" target="RFC2622"/> defines that for an as-set these attributes allow for the inclusion of aut-nums in the as-set, iff the criteria defined in the RFC linking both attributes together is met.</t>
      <t><xref section="5.2" sectionFormat="of" target="RFC2622"/> defines that for a route-set these attributes allow for the inclusion of routes in the route-set, iff the criteria defined in the RFC linking both attributes together is met.</t>
    </list></t>
  <t><xref section="3" sectionFormat="of" target="RFC4012"/> defines the router6 class along with the <spanx style="verb">member-of</spanx> attribute on that class, and as a result, allows for the inclusion of route6 objects in a route-set, iff the criteria relating to <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes defined in <xref section="5.2" sectionFormat="of" target="RFC2622"/> is met.</t>
</list></t>

<t>When using the <spanx style="verb">(mp-)members</spanx> attribute to include an as-set or route-set (hereinafter the "included set") inside another as-set or route-set (hereinafter the "including set"), all members of the included set are included in the including set. This is not limited to the members directly nested inside the included set, but all members recursively included all the way down the RPSL hierarchy. This implicit recursive inclusion logic is herein referred to as "greedy" logic.</t>

<t>In the figure below, the as-set <spanx style="verb">AS-EXAMPLE-1</spanx> only includes one member but, as a result of that single inclusion, AS-EXAMPLE-1 now contains the aut-nums AS65001, AS65002, and AS65003:</t>

<figure title="A three level hierarchy is created even though AS-EXAMPLE-1 only includes one additional as-set"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2

as-set: AS-EXAMPLE-2
members: AS65001, AS65002, AS-EXAMPLE-3

as-set: AS-EXAMPLE-3
members: AS65003
]]></sourcecode></figure>

<t>The same inclusion logic applies to a route-set which references another route-set, as-set, or aut-num, in the <spanx style="verb">members</spanx> attribute; everything inside the included set, all the way down the recursed tree, is implicitly included into the including set.</t>

<t>Similarly greedy logic also applies to prefixes too; the <spanx style="verb">(mp-)members</spanx> attribute of a route-set includes any route/route6 objects which match the IPv4/6 address prefix range and optional range operator.</t>

</section>
<section anchor="existing-methods-of-exclusion"><name>Existing Methods of Exclusion</name>

<t>The filter-set class and <spanx style="verb">filter</spanx> attribute are defined in <xref section="5.4" sectionFormat="of" target="RFC2622"/>. Correspondingly, the <spanx style="verb">mp-filter</spanx> attribute was later defined in <xref section="2.5.2" sectionFormat="of" target="RFC4012"/>. Together these attributes provide a method for declaring in the IRR ecosystem the prefixes a network will not accept.</t>

<t>Additionally, the <spanx style="verb">(mp-)filter</spanx> attribute may be used to exclude route/route6 objects which have been included by the greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of a route-set. This is achieved by first including all route/route6 objects which match the IPv4/6 address prefix range and optional range operator in the <spanx style="verb">(mp-)members</spanx> attribute on the route-set, and then removing any route/route6 objects from this result which match the IPv4/6 address prefix range and optional range operator in the <spanx style="verb">(mp-)members</spanx> attribute of the filter-set.</t>

<t>For as-sets and route-sets which use the <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes, both attributes have to contain corresponding values. This already reduces the greediness of the inclusion logic. It is also already possible to further reduce the greediness. This can be achieved by changing the value of <spanx style="verb">mbrs-by-ref</spanx> from ANY to a list of specific values, and/or by removing the as-set or route-set primary key from the <spanx style="verb">members-of</spanx> attribute of an aut-num or route/route6 object.</t>

<t>There is currently no method to exclude either an aut-num, an as-set, or a route-set, which was included by the greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of an as-set or route-set object.</t>

</section>
<section anchor="the-need-for-additional-exclusion-control"><name>The Need for Additional Exclusion Control</name>

<t>The existing greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of as-sets and route-sets, coupled with the inability to alter this logic, can result in various undesired effects for operators. A non-exhaustive list of possible undesirable outcomes follows:</t>

<t><list style="numbers" type="1">
  <t>A member is added to a set which is not connected to or related to the network operated by the owner of the including set. This allows the including set owner to originate prefixes they aren't authorised to originate. Upstreams and peers of the network owning the including set, aren't able to generate an IRR derived prefix or AS path filter which excludes the unauthorised included set. Note that this can happen anywhere in the set hierarchy; the unauthorised include may be nested many levels down within the including set used by a peer or upstream, making it difficult to get included set removed.</t>
  <t>A member is added to a set which creates a loop when the set is resolved (set A contains set B which contains set A). This can lead to IRR derived prefix or AS path filters either massively expanding in size, or simply not being resolvable.</t>
  <t>A member is added to a set, that set is intended to contain a network's downstreams, but the included set relates to a peer or upstream, not a downstream. The operator of the including set now becomes a transit provider for the operator of the included set. This can also lead to IRR derived prefix or AS path filters massively expanding in size.</t>
  <t>A member is added to a set which relates to an operator who's actions violate a law, a geo-political agreement, or the connectivity terms and conditions, of a peer or upstream of the including set operator. The peer or upstream has no choice but to exclude the included set from their peer's or downstream's IRR derived prefix or AS path filters. However, this currently requires a custom and potentially manual workaround, as there is no standard mechanism to support this in an automated manor.</t>
  <t>A member is added to a set with whom a peer or upstream of the including set operator already has a direct relation. A regulatory requirement may restrict the peer or upstream from exchanging traffic with the operator of the included set via the including set operator, or via any 3rd party operator.</t>
</list></t>

<t>This document updates the RPSL definition in <xref target="RFC4012"/> by introducing the <spanx style="verb">excl-members</spanx> attribute, which allows the including set operator to exclude aut-nums, as-sets, and route-sets, from the included set, or exclude the included set entirely.</t>

</section>
<section anchor="requirements-language"><name>Requirements Language</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>In this document, the key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>",
"<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>",
and "<bcp14>OPTIONAL</bcp14>" are to be interpreted as described in BCP 14, RFC 2119
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-excl-members-attribute"><name>The <spanx style="verb">excl-members</spanx> Attribute</name>

<t>The <spanx style="verb">excl-members</spanx> attribute is defined by this document for the as-set class and route-set class.</t>

<section anchor="the-as-set-class"><name>The as-set Class</name>

<t>The new <spanx style="verb">excl-members</spanx> attribute on the as-set class uses almost exactly the same syntax as the existing <spanx style="verb">members</spanx> attribute from <xref section="5.1" sectionFormat="of" target="RFC2622"/>, in that one or more RPSL primary keys of an aut-num or as-set may be specified. The only difference is that when an as-set is specified in <spanx style="verb">excl-members</spanx>, the as-set primary key <bcp14>MUST</bcp14> be prefixed with a registry name and a double colon (e.g., <spanx style="verb">SOURCE::</spanx>). This requirement is to ensure that the correct object is being excluded due to the inherent ambiguity of as-set primary keys in the existing IRR ecosystem (as documented in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>).</t>

<dl newline="true">
  <dt>Attribute:</dt>
  <dd>
    <t><spanx style="verb">excl-members</spanx></t>
  </dd>
  <dt>Value:</dt>
  <dd>
    <t>list of ([<spanx style="verb">as-number</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">as-set-name</spanx>])</t>
  </dd>
  <dt>Type:</dt>
  <dd>
    <t>optional, multi-valued</t>
  </dd>
</dl>

</section>
<section anchor="the-route-set-class"><name>The route-set Class</name>

<t>The new <spanx style="verb">excl-members</spanx> attribute on the route-set class uses similar syntax as the existing <spanx style="verb">members</spanx> attribute from Sections <xref target="RFC2622" section="5.2" sectionFormat="bare"/> and <xref target="RFC2622" section="5.3" sectionFormat="bare"/> of <xref target="RFC2622"/>, in that one or more RPSL primary keys of an aut-num, an as-set, or route-set may be specified. What is different is that <spanx style="verb">excl-members</spanx> doesn't accept IPv4/6 address prefix ranges because they can already be filtered using a filter-set. In the case that an as-set or route-set is specified in <spanx style="verb">excl-members</spanx>, the set primary key <bcp14>MUST</bcp14> be prefixed with a registry name and a double colon (e.g., <spanx style="verb">SOURCE::</spanx>). This requirement is to ensure that the correct object is being excluded due to the inherent ambiguity of as-set and route-set primary keys in the existing IRR ecosystem (as documented in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>).</t>

<dl newline="true">
  <dt>Attribute:</dt>
  <dd>
    <t><spanx style="verb">excl-members</spanx></t>
  </dd>
  <dt>Value:</dt>
  <dd>
    <t>list of ([<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">route-set-name</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">as-set-name</spanx>] or [<spanx style="verb">as-number</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">route-set-name</spanx>][<spanx style="verb">range-operator</spanx>])</t>
  </dd>
  <dt>Type:</dt>
  <dd>
    <t>optional, multi-valued</t>
  </dd>
</dl>

</section>
<section anchor="attribute-validation"><name>Attribute Validation</name>

<t>When an authoritative IRR registry processes the creation or update of an as-set or route-set object with the <spanx style="verb">excl-members</spanx> attribute present, it <bcp14>MUST</bcp14> validate the contents of the attribute.</t>

<section anchor="registry-scoped-keys-only"><name>Registry Scoped Keys Only</name>

<t>All primary keys in <spanx style="verb">excl-members</spanx> <bcp14>MUST</bcp14> have a registry scope provided, with the exception of an aut-num primary key.</t>

<t>By requiring registry scoped as-set and route-set keys to be used in the <spanx style="verb">excl-members</spanx> attribute, it becomes possible to have multiple references to the same RPSL primary key. This is not permitted, and IRR registry software <bcp14>MUST</bcp14> reject this:</t>

<figure title="Invalid object fragment using multiple registry prefixes with the same RPSL primary key"><sourcecode type="rpsl"><![CDATA[
excl-members: RIPE::AS-EXAMPLE, ARIN::AS-EXAMPLE
]]></sourcecode></figure>

<t>The IRR registry software <bcp14>MUST</bcp14> verify that without their registry prefix, all references from <spanx style="verb">excl-members</spanx> are unique.</t>

<t>If allowed, the attribute <spanx style="verb">excl-members: RIPE::AS-EXAMPLE, ARIN::AS-EXAMPLE</spanx> would refer to two different set objects, whereas the <spanx style="verb">(mp-)members</spanx> attribute can only contain one instance of <spanx style="verb">AS-EXAMPLE</spanx>, which creates ambiguity regarding which set the exclusion refers to, when sets exist in multiple registries with the same primary key.</t>

<t>Similarly, the IRR software <bcp14>MUST NOT</bcp14> allow for the registry scopes in the <spanx style="verb">excl-members</spanx> attribute and the <spanx style="verb">src-members</spanx> attribute to be mixed, when both attributes are populated on the same set object, and when they referencing the same primary key with the registry scope removed.</t>

<figure title="Invalid object fragment using different registry prefixes with the same RPSL primary key across attributes"><sourcecode type="rpsl"><![CDATA[
member: AS-EXAMPLE
src-members: ARIN::AS-EXAMPLE
excl-members: RIPE::AS-EXAMPLE
]]></sourcecode></figure>

<t>If allowed, due to the presence of the <spanx style="verb">src-members</spanx> attribute, ARIN::AS-EXAMPLE is included instead of AS-EXAMPLE (<spanx style="verb">src-members</spanx> is taking preference over <spanx style="verb">members</spanx>), and the <spanx style="verb">excl-members</spanx> attribute value RIPE::AS-EXAMPLE wouldn't match the <spanx style="verb">src-members</spanx> value.</t>

</section>
<section anchor="any-primary-key-and-registry-scope"><name>Any Primary Key and Registry Scope</name>

<t>The IRR software <bcp14>MUST NOT</bcp14> require that the primary key of an entry in the <spanx style="verb">excl-members</spanx> attribute is also a direct member of the object being created or updated. The <spanx style="verb">excl-members</spanx> attribute is used to exclude objects anywhere in the hierarchy, starting from the point of definition, moving downwards within the hierarchy. This is because the object to be excluded, might be being included by a member, of a member, of a member, for example.</t>

<t>When creating or updating an object with the <spanx style="verb">excl-members</spanx> attribute, the authoritative IRR software <bcp14>MUST NOT</bcp14> require that the registry scope which precedes the object primary key, is a registry the IRR software knows to be a valid registry. An authoritative IRR server may have it's content mirrored to resolver IRR servers, which have visibility of many more registries.</t>

</section>
</section>
<section anchor="joint-vs-split-attributes"><name>Joint vs. Split Attributes</name>

<t>The <spanx style="verb">excl-members</spanx> attribute could have been designed to be two separate attributes i.e., <spanx style="verb">excl-members</spanx> and <spanx style="verb">excl-mp-members</spanx>. This would provide finer grained control by only excluding a primary key found in a <spanx style="verb">members</spanx> attribute, and only excluding a primary key found in an <spanx style="verb">mp-members</spanx> attribute, respectively. This creates additional problems though:</t>

<t><list style="numbers" type="1">
  <t>If the primary key of an object which needs to be excluded exists in the data hierarchy in a <spanx style="verb">members</spanx> attribute, but is only excluded if found in an <spanx style="verb">mp-members</spanx> attribute (e.g., it is only referenced in <spanx style="verb">excl-mp-members</spanx>), the object referenced is not successfully excluded. The problem is that the wrong exclude attribute has been used. This problem doesn't exist with a single combined exclude attribute.</t>
  <t>The syntax of the <spanx style="verb">mp-members</spanx> attribute allows it to contain all types of value supported by the <spanx style="verb">members</spanx> attribute, plus additional value types not supported by the <spanx style="verb">members</spanx> attribute (syntactically <spanx style="verb">mp-members</spanx> supports a superset of <spanx style="verb">members</spanx>). A primary key type which is valid in both attributes, such as a route-set, could be included via the <spanx style="verb">members</spanx> attribute or the <spanx style="verb">mp-members</spanx> attribute in the data hierarchy. To ensure this object is excluded, it's primary key would need to be added to both exclude attributes. This creates the problem that the two attributes would need to always store all values which are valid in the <spanx style="verb">members</spanx> attribute. This would render an <spanx style="verb">excl-members</spanx> attribute redundant because everything is duplicated in an <spanx style="verb">excl-mp-members</spanx> attribute. This problem doesn't exist with a single combined exclude attribute.</t>
  <t>Split exclude attributes allows for the intentional evasion of an exclusion, by looking up the data hierarchy, observing that a primary is excluded only if found in one of the <spanx style="verb">(mp-)members</spanx> attributes, and then intentionally including it in the other attribute. This problem doesn't exist with a combined excluded attribute.</t>
</list></t>

<t>Due to the problems listed above, the <spanx style="verb">excl-members</spanx> attribute has been specifically designed to be a single attribute, to avoid these problems.</t>

</section>
</section>
<section anchor="exclusion-logic"><name>Exclusion Logic</name>

<section anchor="the-as-set-class-1"><name>The as-set Class</name>

<t>When the <spanx style="verb">excl-members</spanx> attribute is populated on an as-set object, the primary keys stored in the attribute reference aut-nums or as-sets that <bcp14>MUST NOT</bcp14> be resolved by a resolving IRR server, when recursively resolving the members of that as-set object.</t>

<t><list style="numbers" type="1">
  <t>This exclusion applies to the <spanx style="verb">members</spanx> attribute of the as-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">members</spanx> attribute of all recursively resolved as-sets within that set. Because the RPSL primary keys stored in the <spanx style="verb">excl-members</spanx> attribute have a registry scope prepended, the primary keys in the <spanx style="verb">members</spanx> attribute <bcp14>MUST</bcp14> be checked against all keys in the <spanx style="verb">excl-members</spanx> attribute with the registry scope removed.</t>
  <t>This exclusion applies to the <spanx style="verb">src-members</spanx> attribute (as defined in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>) of the as-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">src-members</spanx> attribute of all recursively resolved as-sets within that set. In this case the registry scoped RPSL primary keys in <spanx style="verb">src-members</spanx> <bcp14>MUST</bcp14> match a registry scoped key in <spanx style="verb">excl-members</spanx> exactly, without the registry scope having being removed from either of the two keys being compared.</t>
  <t>If both <spanx style="verb">members</spanx> and <spanx style="verb">src-members</spanx> are defined on an as-set object, and the same key exists in both attributes when the registry scope is removed from the <spanx style="verb">src-members</spanx> entry, the key from <spanx style="verb">src-members</spanx> with the registry scope prepended <bcp14>MUST</bcp14> be compared against all entries in <spanx style="verb">excl-members</spanx>. Matching keys in <spanx style="verb">src-members</spanx> takes precedence over matching keys in <spanx style="verb">members</spanx>.</t>
</list></t>

<t>The figure below shows IRR data in its raw an unresolved state:</t>

<figure title="An example as-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2, AS65001
source: ARIN

as-set: AS-EXAMPLE-2
members: AS65002, AS-EXAMPLE-3
excl-members: RIPE::AS-EXAMPLE-4, AS65005, AS65002
source: RIPE

as-set: AS-EXAMPLE-3
members: AS65003, AS65005, AS-EXAMPLE-4
src-members: RIPE::AS-EXAMPLE-4
source: RIPE

as-set: AS-EXAMPLE-4
members: AS65004
source: ARIN
]]></sourcecode></figure>

<t>The figure below shows the result from a resolving IRR server having resolved the members of set <spanx style="verb">AS-EXAMPLE-1</spanx> when the <spanx style="verb">excl-members</spanx> logic is applied:</t>

<figure title="AS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS65001, AS65003
]]></sourcecode></figure>

<t><list style="symbols">
  <t>It can be seen that <spanx style="verb">excl-members</spanx> took effect on the object it was defined, not just it's descendants. This is shown by AS65002 not being included in the final result because AS65002 is both a <spanx style="verb">member</spanx> <em>and</em> <spanx style="verb">excl-members</spanx> of AS-EXAMPLE-2.</t>
  <t>AS-EXAMPLE-4 is excluded even though AS-EXAMPLE-4 is defined in ARIN and RIPE::AS-EXAMPLE-4 is specified in <spanx style="verb">excl-members</spanx> on AS-EXAMPLE-2. This is because the AS-EXAMPLE-4 entry in the <spanx style="verb">members</spanx> attribute of AS-EXAMPLE-3 is ambiguous, but a <spanx style="verb">src-members</spanx> attribute has been defined which takes precedence over <spanx style="verb">members</spanx>. The exclusion is applied against the <spanx style="verb">src-members</spanx> attribute of AS-EXAMPLE-3 (which may be an as-set not displayed here or a non-existing set).</t>
</list></t>

</section>
<section anchor="the-route-set-class-1"><name>The route-set Class</name>

<t>When the <spanx style="verb">excl-members</spanx> attribute is populated on a route-set object, the primary keys stored in the attribute reference aut-nums, or as-sets, or route-sets, that <bcp14>MUST NOT</bcp14> be resolved by a resolving IRR server, when recursively resolving the members of that route-set object.</t>

<t><list style="numbers" type="1">
  <t>This exclusion applies to the <spanx style="verb">(mp-)members</spanx> attributes of the route-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">(mp-)members</spanx> attributes of all recursively resolved route-sets and as-sets within that route-set. Because the RPSL primary keys stored in the <spanx style="verb">excl-members</spanx> attribute have a registry scope prepended, the primary keys in the <spanx style="verb">(mp-)members</spanx> attributes <bcp14>MUST</bcp14> be checked against all keys in <spanx style="verb">excl-members</spanx> attribute with the registry scope removed.</t>
  <t>This exclusion applies to the <spanx style="verb">src-members</spanx> attribute (as defined in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>) of the route-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">src-members</spanx> attribute of all recursively resolved route-sets and as-sets within that route-set. In this case the registry scoped RPSL primary keys in <spanx style="verb">src-members</spanx> <bcp14>MUST</bcp14> match a registry scoped key in <spanx style="verb">excl-members</spanx> exactly, without the registry scope having being removed from either of the two keys being compared.</t>
  <t>If both <spanx style="verb">(mp-)members</spanx> and <spanx style="verb">src-members</spanx> are defined on a route-set object, and the same key exists in both attributes when the registry scope is removed from the <spanx style="verb">src-members</spanx> entry, the key from <spanx style="verb">src-members</spanx> with the registry scope prepended <bcp14>MUST</bcp14> be compared against all entries in <spanx style="verb">excl-members</spanx>. Matching keys in <spanx style="verb">src-members</spanx> takes precedence over matching keys in <spanx style="verb">(mp-)members</spanx>.</t>
</list></t>

<t>The figure below shows IRR data in its raw an unresolved state:</t>

<figure title="An example route-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
route-set: RS-EXAMPLE-1
members: 192.0.2.0/25, RS-EXAMPLE-2
source: ARIN

route-set: RS-EXAMPLE-2
mp-members: 2001:db8::/33
mp-members: RS-EXAMPLE-3, RS-EXAMPLE-4
src-members: RIPE::RS-EXAMPLE-3, RIPE::RS-EXAMPLE-4
excl-members: RIPE::RS-EXAMPLE-4
source: RIPE

route-set: RS-EXAMPLE-3
members: 192.0.2.128/25, RS-EXAMPLE-4
source: RIPE

route-set: RS-EXAMPLE-4
members: 2001:db8:8000::/33
source: ARIN
]]></sourcecode></figure>

<t>The figure below shows the result from a resolving IRR server having resolved the members of set <spanx style="verb">RS-EXAMPLE-1</spanx> when the <spanx style="verb">excl-members</spanx> logic is applied:</t>

<figure title="RS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: RS-EXAMPLE-1
members: 192.0.2.0/25, 2001:db8::/33, 192.0.2.128/25
]]></sourcecode></figure>

<t><list style="symbols">
  <t>It can be seen that <spanx style="verb">excl-members</spanx> took effect on the object it was defined on, not just it's descendants. This is shown by 2001:db8:8000::/33 not being included in the final result because RS-EXAMPLE-4 is both a <spanx style="verb">member</spanx> <em>and</em> <spanx style="verb">excl-members</spanx> of RS-EXAMPLE-2.</t>
  <t>Even though RS-EXAMPLE-4 is excluded by RS-EXAMPLE-2, it was also included by RS-EXAMPLE-3, but still 2001:db8:8000::/33 is excluded. This shows that the exclusion logic applies from the point in the hierarchy where it is defined, all the way down, taking precedence over any subsequent includes.</t>
  <t>RS-EXAMPLE-4 is excluded even though RS-EXAMPLE-4 is defined in ARIN and RIPE::RS-EXAMPLE-4 is specified in <spanx style="verb">excl-members</spanx> on RS-EXAMPLE-2. This is because the AS-EXAMPLE-4 entry in the <spanx style="verb">(mp-)members</spanx> attribute of RS-EXAMPLE-3 is ambiguous due to the lack of <spanx style="verb">src-members</spanx> attribute on RS-EXAMPLE-3. This means that the <spanx style="verb">excl-members</spanx> value RIPE::RS-EXAMPLE-4 has to be checked against the <spanx style="verb">members</spanx> attribute on RS-EXAMPLE-3 with the registry scope removed.</t>
</list></t>

</section>
<section anchor="cumulative-excludes"><name>Cumulative Excludes</name>

<t>As as-set or route-set objects are recursively resolved and <spanx style="verb">excl-members</spanx> attributes are discovered, the RPSL primary keys to be excluded need to be tracked. At any point in the hierarchy where <spanx style="verb">excl-members</spanx> is discovered, all <spanx style="verb">(mp-)members</spanx> and <spanx style="verb">src-members</spanx> attributes from that point onwards are subject to the <spanx style="verb">excl-members</spanx> which have been discovered so far. However, depending on the resolution algorithm being used by the resolving software i.e., a depth first search or breadth first search, multiple lists of RPSL keys to exclude may have to be maintained (the exact implementation details are outside the scope of this document).</t>

<t>This section does not aim to define how the logic should be implemented in software, simply to demonstrate that the exclusion list is cumulative, but not as simple as a single global list.</t>

<t>The following figure shows as-set objects in their unresolved state:</t>

<figure title="An example as-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2, AS-EXAMPLE-3
excl-members: RIPE::AS-EXAMPLE-4

as-set: AS-EXAMPLE-2
members: AS-EXAMPLE-4
excl-members: RIPE::AS-EXAMPLE-5

as-set: AS-EXAMPLE-4
members: AS65004

as-set: AS-EXAMPLE-3
members: AS-EXAMPLE-5
excl-members: AS65006

as-set: AS-EXAMPLE-5
members: AS65005
]]></sourcecode></figure>

<t>The following figure shows the resolved members of as-set AS-EXAMPLE-1:</t>

<figure title="AS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS65005
]]></sourcecode></figure>

<t><list style="numbers" type="1">
  <t>The resolving process starts by resolving the members of AS-EXAMPLE-1.</t>
  <t>If a depth first search approach is taken by the IRR software, AS-EXAMPLE-2 might be resolved next. AS-EXAMPLE-4 is not included due to the <spanx style="verb">excl-members</spanx> attribute defined on AS-EXAMPLE-1. This is being applied from the point of definition onwards, the resolving process inherited the currently defined list of excludes (RIPE::AS-EXAMPLE-4) when it moved on to resolve AS-EXAMPLE-2.</t>
  <t>AS-EXAMPLE-2 defined a new <spanx style="verb">excl-members</spanx> attribute with the value RIPE::AS-EXAMPLE-5 however, there is nothing left to resolve in AS-EXAMPLE-2 so this exclusion has no effect.</t>
  <t>Continuing the depth first search approach, the IRR software returns to AS-EXAMPLE-1, and uses the exclusion list as it existed whilst resolving AS-EXAMPLE1-1 (it contains only RIPE::AS-EXAMPLE-4), and now begins to resolve AS-EXAMPLE-3.</t>
  <t>AS-EXAMPLE-3 includes AS-EXAMPLE-5. This is not excluded even though the IRR software has encountered an <spanx style="verb">excl-members</spanx> attribute which contains the value RIPE::AS-EXAMPLE-5. This is because that <spanx style="verb">excl-members</spanx> attribute was found on a different branch of the hierarchy.</t>
  <t>Continuing the resolution process, resolving AS-EXAMPLE-5 returns AS65005 only. The exclusion of AS65006 defined on AS-EXAMPLE-3 was applied to the resolution of AS-EXAMPLE-5 in addition to the exclusion of RIPE::AS-EXAMPLE-4, however no <spanx style="verb">members</spanx> or <spanx style="verb">src-members</spanx> attributes were found on AS-EXAMPLE-5 with these values.</t>
</list></t>

<t>The example shows that discovered exclusions do not apply across branches of the hierarchy. This <bcp14>MUST NOT</bcp14> be allowed by the software implementation. If allowed, the operator of an as-set or route-set would be able to excluded objects from other sets they are not responsible for.</t>

</section>
</section>
<section anchor="backwards-compatibility"><name>Backwards Compatibility</name>

<t>The behaviour or RPSL compliant software is to ignore unrecognised attributes. This means that adding the exclusion logic defined in this document based on the contents of a new attribute has no impact when existing IRR software implementations process an object with the new attribute defined.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This memo includes no request to IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document adds the ability to specify that IRR derived prefix and AS path filter lists may exclude specific entries, which may be the cause of security issue, that are presently included by the existing greedy logic.</t>

<t>It is possible that the operator of an including set includes the wrong primary key in the <spanx style="verb">excl-members</spanx> attribute. However, this is not a new issue, it has long been possible to include the unintended primary keys in set objects. This document doesn't change this existing behaviour.</t>

<t>Great progress has been made with the deployment of Route Origin Authorizations (ROAs) as defined in <xref target="RFC9582"/>, and the ongoing development of Autonomous System Provider Authorization (ASPA) objects as defined in <xref target="draft-ietf-sidrops-aspa-verification"/>. The method proposed in this document in intended to compliment those existing developments, further enriching the existing operator's toolkit, and not work against them or be mutually exclusive.</t>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC2622">
  <front>
    <title>Routing Policy Specification Language (RPSL)</title>
    <author fullname="C. Alaettinoglu" initials="C." surname="Alaettinoglu"/>
    <author fullname="C. Villamizar" initials="C." surname="Villamizar"/>
    <author fullname="E. Gerich" initials="E." surname="Gerich"/>
    <author fullname="D. Kessens" initials="D." surname="Kessens"/>
    <author fullname="D. Meyer" initials="D." surname="Meyer"/>
    <author fullname="T. Bates" initials="T." surname="Bates"/>
    <author fullname="D. Karrenberg" initials="D." surname="Karrenberg"/>
    <author fullname="M. Terpstra" initials="M." surname="Terpstra"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>RPSL allows a network operator to be able to specify routing policies at various levels in the Internet hierarchy; for example at the Autonomous System (AS) level. At the same time, policies can be specified with sufficient detail in RPSL so that low level router configurations can be generated from them. RPSL is extensible; new routing protocols and new protocol features can be introduced at any time. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2622"/>
  <seriesInfo name="DOI" value="10.17487/RFC2622"/>
</reference>
<reference anchor="RFC4012">
  <front>
    <title>Routing Policy Specification Language next generation (RPSLng)</title>
    <author fullname="L. Blunk" initials="L." surname="Blunk"/>
    <author fullname="J. Damas" initials="J." surname="Damas"/>
    <author fullname="F. Parent" initials="F." surname="Parent"/>
    <author fullname="A. Robachevsky" initials="A." surname="Robachevsky"/>
    <date month="March" year="2005"/>
    <abstract>
      <t>This memo introduces a new set of simple extensions to the Routing Policy Specification Language (RPSL), enabling the language to document routing policies for the IPv6 and multicast address families currently used in the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4012"/>
  <seriesInfo name="DOI" value="10.17487/RFC4012"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9582">
  <front>
    <title>A Profile for Route Origin Authorizations (ROAs)</title>
    <author fullname="J. Snijders" initials="J." surname="Snijders"/>
    <author fullname="B. Maddison" initials="B." surname="Maddison"/>
    <author fullname="M. Lepinski" initials="M." surname="Lepinski"/>
    <author fullname="D. Kong" initials="D." surname="Kong"/>
    <author fullname="S. Kent" initials="S." surname="Kent"/>
    <date month="May" year="2024"/>
    <abstract>
      <t>This document defines a standard profile for Route Origin Authorizations (ROAs). A ROA is a digitally signed object that provides a means of verifying that an IP address block holder has authorized an Autonomous System (AS) to originate routes to one or more prefixes within the address block. This document obsoletes RFC 6482.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9582"/>
  <seriesInfo name="DOI" value="10.17487/RFC9582"/>
</reference>

<reference anchor="draft-romijn-grow-rpsl-registry-scoped-members" target="https://datatracker.ietf.org/doc/draft-romijn-grow-rpsl-registry-scoped-members/">
  <front>
    <title>Registry scoped members for RPSL set objects</title>
    <author initials="S." surname="Romijn" fullname="Sasha Romijn">
      <organization>Reliably Coded</organization>
    </author>
    <author initials="J." surname="Bensley" fullname="James Bensley">
      <organization>Inter.link GmbH</organization>
    </author>
    <date year="2025" month="February" day="21"/>
  </front>
  <format type="HTML" target="https://www.ietf.org/archive/id/draft-romijn-grow-rpsl-registry-scoped-members-01.html"/>
  <format type="TXT" target="https://www.ietf.org/archive/id/draft-romijn-grow-rpsl-registry-scoped-members-01.txt"/>
</reference>
<reference anchor="draft-ietf-sidrops-aspa-verification" target="https://datatracker.ietf.org/doc/draft-ietf-sidrops-aspa-verification/">
  <front>
    <title>BGP AS_PATH Verification Based on Autonomous System Provider Authorization (ASPA) Objects</title>
    <author initials="A." surname="Azimov" fullname="Alexander Azimov">
      <organization>Yandex</organization>
    </author>
    <author initials="E." surname="Bogomazov" fullname="Eugene Bogomazov">
      <organization>Qrator Labs</organization>
    </author>
    <author initials="R." surname="Bush" fullname="Randy Bush">
      <organization>IIJ &amp; Arrcus</organization>
    </author>
    <author initials="K." surname="Patel" fullname="Keyur Patel">
      <organization>Arrcus</organization>
    </author>
    <author initials="J." surname="Snijders" fullname="Job Snijders">
      <organization></organization>
    </author>
    <author initials="K." surname="Sriram" fullname="Kotikalapudi Sriram">
      <organization>USA NIST</organization>
    </author>
    <date year="2025" month="March" day="23"/>
  </front>
  <format type="HTML" target="https://www.ietf.org/archive/id/draft-ietf-sidrops-aspa-verification-22.html"/>
  <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-sidrops-aspa-verification-22.txt"/>
</reference>


    </references>

</references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

