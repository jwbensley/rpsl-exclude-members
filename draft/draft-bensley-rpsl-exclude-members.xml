<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.26 (Ruby 3.2.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-bensley-rpsl-exclude-members-00" category="info" submissionType="IETF">
  <front>
    <title abbrev="Explicitly excluding objects from RPSL sets">Explicitly excluding objects from RPSL sets</title>

    <author initials="J." surname="Bensley" fullname="James Bensley">
      <organization>Inter.link GmbH</organization>
      <address>
        <postal>
          <street>Boxhagener Str. 80</street>
          <city>Berlin</city>
          <code>10245</code>
          <country>Germany</country>
        </postal>
        <email>james@inter.link</email>
      </address>
    </author>

    <date year="2025" month="March" day="24"/>

    
    
    

    <abstract>


<?line 75?>

<t>This document updates <xref target="RFC2622"/> and <xref target="RFC4012"/> by defining the <spanx style="verb">excl-members</spanx> attribute on as-set and route-set classes in the Routing Policy Specification Language (RPSL). This new attribute allows operators to overcome limitations of the existing syntax, which currently only supports the implicit inclusion of everything contained within an as-set or route-set.</t>



    </abstract>



  </front>

  <middle>


<?line 79?>

<section anchor="introduction"><name>Introduction</name>

<t>The Routing Policy Specification Language (RPSL) <xref target="RFC2622"/> defines the as-set and route-set classes. These sets can either reference a direct member of the set (such as an AS number, IP prefix, etc.), or additional sets which themselves have their own direct members and/or reference yet more sets, ad infinitum. Server and client software can follow these references to recursively resolve all the members of a set i.e., until all references have been resolved leaving a set of prefixes or ASes.</t>

<section anchor="existing-methods-of-inclusion"><name>Existing Methods of Inclusion</name>

<t>The existing RPSL syntax allows for members of an as-set or route-set to be specified in multiple ways:</t>

<t><list style="numbers" type="1">
  <t><xref target="RFC2622"/> defines the <spanx style="verb">members</spanx> attribute.
  <list style="numbers" type="1">
      <t><xref section="5.1" sectionFormat="of" target="RFC2622"/> defines that for an as-set this attribute stores one or more primary keys, each referencing an aut-num or or as-set object.</t>
      <t>Sections <xref target="RFC2622" section="5.2" sectionFormat="bare"/> and <xref target="RFC2622" section="5.3" sectionFormat="bare"/> of <xref target="RFC2622"/> and  defines that for a route-set this attribute may store one or more primary keys, each referencing a route-set object which optionally has a range operator appended, an aut-num, or an as-set. Alternatively, the <spanx style="verb">members</spanx> attribute on a route-set may store an IPv4 address prefix range directly i.e., not an RPSL primary key that points directly to route object, and that prefix range is used to identify matching route objects. That address prefix range may optionally have a range operator appended.</t>
    </list></t>
  <t><xref section="4.2" sectionFormat="of" target="RFC4012"/> defines the <spanx style="verb">mp-members</spanx> attribute for route-sets. This attribute may store one or more primary keys, each referencing a route-set object which optionally has a range operator appended, or an IPv4 address prefix range directly, or an IPv6 address prefix range directly. Although not explicitly stated in RFC4012, implementations of the <spanx style="verb">mp-members</spanx> attributes have based it on the RFC2622 definition and allowed the attribute to also store the RPSL primary key of aut-nums and as-sets.</t>
  <t><xref target="RFC2622"/> defines the <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes.
  <list style="numbers" type="1">
      <t><xref section="5.1" sectionFormat="of" target="RFC2622"/> defines that for an as-set these attributes allow for the inclusion of aut-nums in the as-set, iff the criteria defined in the RFC linking both attributes together is met.</t>
      <t><xref section="5.2" sectionFormat="of" target="RFC2622"/> defines that for a route-set these attributes allow for the inclusion of routes in the route-set, iff the criteria defined in the RFC linking both attributes together is met.</t>
    </list></t>
  <t><xref section="3" sectionFormat="of" target="RFC4012"/> defines the router6 class along with the <spanx style="verb">member-of</spanx> attribute on that class, and as a result, allows for the inclusion of route6 objects in a route-set, iff the criteria relating to <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes defined in <xref section="5.2" sectionFormat="of" target="RFC2622"/> is met.</t>
</list></t>

<t>When using the <spanx style="verb">(mp-)members</spanx> attribute to include an as-set or route-set (hereinafter the "included set") inside another as-set or route-set (hereinafter the "including set"), all members of the included set are included in the including set. This is not limited to the members directly nested inside the included set, but all members recursively included all the way down the RPSL hierarchy. This implicit recursive inclusion logic is herein referred to as "greedy" logic.</t>

<t>In the figure below, the as-set <spanx style="verb">AS-EXAMPLE-1</spanx> only includes one member but, as a result of that single inclusion, AS-EXAMPLE-1 now contains the aut-nums AS65001, AS65002, and AS65003:</t>

<figure title="A three level hierarchy is created even though AS-EXAMPLE-1 only includes one additional as-set"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2

as-set: AS-EXAMPLE-2
members: AS65001, AS65002, AS-EXAMPLE-3

as-set: AS-EXAMPLE-3
members: AS65003
]]></sourcecode></figure>

<t>The same inclusion logic applies to a route-set which references another route-set, as-set, or aut-num, in the <spanx style="verb">members</spanx> attribute; everything inside the included set, all the way down the recursed tree, is implicitly included into the including set.</t>

<t>Similarly greedy logic also applies to prefixes too; the <spanx style="verb">(mp-)members</spanx> attribute of a route-set includes any route/route6 objects which match the IPv4/6 address prefix range and optional range operator.</t>

</section>
<section anchor="existing-methods-of-exclusion"><name>Existing Methods of Exclusion</name>

<t>The filter-set class and <spanx style="verb">filter</spanx> attribute are defined in <xref section="5.4" sectionFormat="of" target="RFC2622"/>. Correspondingly, the <spanx style="verb">mp-filter</spanx> attribute was later defined in <xref section="2.5.2" sectionFormat="of" target="RFC4012"/>. Together these attributes provide a method for declaring in the IRR ecosystem the prefixes a network will not accept.</t>

<t>Additionally, the <spanx style="verb">(mp-)filter</spanx> attribute may be used to exclude route/route6 objects which have been included by the greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of a route-set. This is achieved by first including all route/route6 objects which match the IPv4/6 address prefix range and optional range operator in the <spanx style="verb">(mp-)members</spanx> attribute on the route-set, and then removing any route/route6 objects from this result which match the IPv4/6 address prefix range and optional range operator in the <spanx style="verb">(mp-)members</spanx> attribute of the filter-set.</t>

<t>For as-sets and route-sets which use the <spanx style="verb">mbrs-by-ref</spanx> and <spanx style="verb">member-of</spanx> attributes, both attributes have to contain corresponding values. This already reduces the greediness of the inclusion logic. It is also already possible to further reduce the greediness. This can be achieved by changing the value of <spanx style="verb">mbrs-by-ref</spanx> from ANY to a list of specific values, and/or by removing the as-set or route-set primary key from the <spanx style="verb">members-of</spanx> attribute of an aut-num or route/route6 object.</t>

<t>There is currently no method to exclude either an aut-num, an as-set, or a route-set, which was included by the greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of an as-set or route-set object.</t>

</section>
<section anchor="the-need-for-additional-exclusion-control"><name>The Need for Additional Exclusion Control</name>

<t>The existing greedy logic of the <spanx style="verb">(mp-)members</spanx> attribute of as-sets and route-sets, coupled with the inability to alter this logic, can result in various undesired effects for operators. A non-exhaustive list of possible undesirable outcomes follows:</t>

<t><list style="numbers" type="1">
  <t>A member is added to a set which is not connected to or related to the network operated by the owner of the including set. This allows the including set owner to originate prefixes they aren't authorised to originate. Upstreams and peers of the network owning the including set, aren't able to generate an IRR derived prefix or AS path filter which excludes the unauthorised included set. Note that this can happen anywhere in the set hierarchy; the unauthorised include may be nested many levels down within the including set used by a peer or upstream, making it difficult to get included set removed.</t>
  <t>A member is added to a set which creates a loop when the set is resolved (set A contains set B which contains set A). This can lead to IRR derived prefix or AS path filters either massively expanding in size, or simply not being resolvable.</t>
  <t>A member is added to a set, that set is intended to contain a network's downstreams, but the included set relates to a peer or upstream, not a downstream. The operator of the including set now becomes a transit provider for the operator of the included set. This can also lead to IRR derived prefix or AS path filters massively expanding in size.</t>
  <t>A member is added to a set which relates to an operator who's actions violate a law, a geo-political agreement, or the connectivity terms and conditions, of a peer or upstream of the including set operator. The peer or upstream has no choice but to exclude the included set from their peer's or downstream's IRR derived prefix or AS path filters. However, this currently requires a custom and potentially manual workaround, as there is no standard mechanism to support this in an automated manor.</t>
  <t>A member is added to a set with whom a peer or upstream of the including set operator already has a direct relation. A regulatory requirement may restrict the peer or upstream from exchanging traffic with the operator of the included set via the including set operator, or via any 3rd party operator.</t>
</list></t>

<t>This document updates the RPSL definition in <xref target="RFC4012"/> by introducing the <spanx style="verb">excl-members</spanx> attribute, which allows the including set operator to exclude aut-nums, as-sets, and route-sets, from the included set, or exclude the included set entirely.</t>

</section>
<section anchor="requirements-language"><name>Requirements Language</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>In this document, the key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>",
"<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>",
and "<bcp14>OPTIONAL</bcp14>" are to be interpreted as described in BCP 14, RFC 2119
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-excl-members-attribute"><name>The <spanx style="verb">excl-members</spanx> Attribute</name>

<t>The <spanx style="verb">excl-members</spanx> attribute is defined for the as-set class and route-set class.</t>

<section anchor="the-as-set-class"><name>The as-set Class</name>

<t>The new <spanx style="verb">excl-members</spanx> attribute on the as-set class uses almost exactly the same syntax as the existing <spanx style="verb">members</spanx> attribute from <xref section="5.1" sectionFormat="of" target="RFC2622"/>, in that one or more RPSL primary keys of an aut-num or as-set may be specified. The only difference is that when an as-set is specified in <spanx style="verb">excl-members</spanx>, the as-set primary key <bcp14>MUST</bcp14> be prefixed with a registry name and a double colon (e.g., <spanx style="verb">SOURCE::</spanx>). This requirement is to ensure that the correct object is being excluded due to the inherent ambiguity of as-set primary keys in the existing IRR ecosystem (as documented in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>).</t>

<dl newline="true">
  <dt>Attribute:</dt>
  <dd>
    <t><spanx style="verb">excl-members</spanx></t>
  </dd>
  <dt>Value:</dt>
  <dd>
    <t>list of ([<spanx style="verb">as-number</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">as-set-name</spanx>])</t>
  </dd>
  <dt>Type:</dt>
  <dd>
    <t>optional, multi-valued</t>
  </dd>
</dl>

</section>
<section anchor="the-route-set-class"><name>The route-set Class</name>

<t>The new <spanx style="verb">excl-members</spanx> attribute on the route-set class uses similar syntax as the existing <spanx style="verb">members</spanx> attribute from Sections <xref target="RFC2622" section="5.2" sectionFormat="bare"/> and <xref target="RFC2622" section="5.3" sectionFormat="bare"/> of <xref target="RFC2622"/>, in that one or more RPSL primary keys of an aut-num, an as-set, or route-set may be specified. What is different is that <spanx style="verb">excl-members</spanx> doesn't accept IPv4/6 address prefix ranges because they can already be filtered using a filter-set. In the case that an as-set or route-set is specified in <spanx style="verb">excl-members</spanx>, the set primary key <bcp14>MUST</bcp14> be prefixed with a registry name and a double colon (e.g., <spanx style="verb">SOURCE::</spanx>). This requirement is to ensure that the correct object is being excluded due to the inherent ambiguity of as-set and route-set primary keys in the existing IRR ecosystem (as documented in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>).</t>

<dl newline="true">
  <dt>Attribute:</dt>
  <dd>
    <t><spanx style="verb">excl-members</spanx></t>
  </dd>
  <dt>Value:</dt>
  <dd>
    <t>list of ([<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">route-set-name</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">as-set-name</spanx>] or [<spanx style="verb">as-number</spanx>] or [<spanx style="verb">registry-name</spanx>]::[<spanx style="verb">route-set-name</spanx>][<spanx style="verb">range-operator</spanx>])</t>
  </dd>
  <dt>Type:</dt>
  <dd>
    <t>optional, multi-valued</t>
  </dd>
</dl>

</section>
<section anchor="attribute-validation"><name>Attribute Validation</name>

<t>When an authoritative IRR registry processes an as-set or route-set object with the <spanx style="verb">excl-members</spanx> attribute present, it <bcp14>MUST</bcp14> validate the contents of the attribute.</t>

<section anchor="registry-scoped-keys-only"><name>Registry Scoped Keys Only</name>

<t>All primary keys in <spanx style="verb">excl-members</spanx> <bcp14>MUST</bcp14> have a registry scope provided with the exception of an AS number.</t>

<t>By requiring registry scoped as-set and route-set keys to be used in the <spanx style="verb">excl-members</spanx> attribute, it becomes possible to have multiple references to the same RPSL primary key. This is not permitted, and IRR registry software <bcp14>MUST</bcp14> reject this:</t>

<figure title="Invalid object fragment using multiple registry prefixes with the same RPSL primary key"><sourcecode type="rpsl"><![CDATA[
excl-members: RIPE::AS-EXAMPLE, ARIN::AS-EXAMPLE
]]></sourcecode></figure>

<t>The IRR registry software <bcp14>MUST</bcp14> verify that without their registry prefix, all references from <spanx style="verb">excl-members</spanx> are unique.</t>

<t>If allowed, the attribute <spanx style="verb">excl-members: RIPE::AS-EXAMPLE, ARIN::AS-EXAMPLE</spanx> would refer to two different set objects, whereas the <spanx style="verb">(mp-)members</spanx> attribute can only contain one instance of <spanx style="verb">AS-EXAMPLE</spanx>, which is ambiguous as to which set this refers to when sets exist in multiple registries with the same primary key.</t>

<t>Similarly, the IRR software <bcp14>MUST NOT</bcp14> allow for the registry scopes in the <spanx style="verb">excl-members</spanx> attribute and the <spanx style="verb">src-members</spanx> attribute to be mixed, when both attributes are populated on the same set object, and when they referencing the same primary key with the registry scope removed.</t>

<figure title="Invalid object fragment using different registry prefixes with the same RPSL primary key across attributes"><sourcecode type="rpsl"><![CDATA[
member: AS-EXAMPLE
src-members: ARIN::AS-EXAMPLE
excl-members: RIPE::AS-EXAMPLE
]]></sourcecode></figure>

<t>If allowed, due to the presence of the <spanx style="verb">src-members</spanx> attribute, ARIN::AS-EXAMPLE is included instead of AS-EXAMPLE (<spanx style="verb">src-members</spanx> is taking preference over <spanx style="verb">members</spanx>), and the <spanx style="verb">excl-members</spanx> attribute value RIPE::AS-EXAMPLE wouldn't match the <spanx style="verb">src-members</spanx> value.</t>

</section>
<section anchor="any-primary-key-and-registry-scope"><name>Any Primary Key and Registry Scope</name>

<t>The IRR software <bcp14>MUST NOT</bcp14> require that the primary key of an entry in the <spanx style="verb">excl-members</spanx> attribute is a direct member of the object being updated. The <spanx style="verb">excl-members</spanx> attribute is used to exclude objects anywhere in the hierarchy, starting from the point of definition.</t>

<t>The IRR software <bcp14>MUST NOT</bcp14> require that the registry scope which precedes the object primary key, is a registry the IRR software knows to be a valid registry. An authoritative IRR server may have it's content mirrored to resolver IRR servers, which have visibility of many more registries.</t>

</section>
</section>
</section>
<section anchor="exclusion-logic"><name>Exclusion Logic</name>

<section anchor="the-as-set-class-1"><name>The as-set Class</name>

<t>When the <spanx style="verb">excl-members</spanx> attribute is populated on an as-set object, the primary keys stored in the attribute reference aut-nums or as-sets that <bcp14>MUST NOT</bcp14> be resolved when recursively resolving the members of that as-set object.</t>

<t><list style="numbers" type="1">
  <t>This exclusion applies to the <spanx style="verb">members</spanx> attribute of the as-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">members</spanx> attribute of all recursively resolved as-sets within that set. Because the RPSL primary keys stored in the <spanx style="verb">excl-members</spanx> attribute have a registry scope prepended, the primary keys in the <spanx style="verb">members</spanx> attribute <bcp14>MUST</bcp14> be checked against all keys in the <spanx style="verb">excl-members</spanx> attribute with the registry scope removed.</t>
  <t>This exclusion applies to the <spanx style="verb">src-members</spanx> attribute (as defined in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>) of the as-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">src-members</spanx> attribute of all recursively resolved as-sets within that set. In this case the registry scoped RPSL primary keys in <spanx style="verb">src-members</spanx> <bcp14>MUST</bcp14> match a registry scoped key in <spanx style="verb">excl-members</spanx> exactly, without the registry scope having being removed from either of the two keys being compared.</t>
  <t>If both <spanx style="verb">members</spanx> and <spanx style="verb">src-members</spanx> are defined on an as-set object, and the same key exists in both attributes when the registry scope is removed from the <spanx style="verb">src-members</spanx> entry, the key from <spanx style="verb">src-members</spanx> with the registry scope prepended <bcp14>MUST</bcp14> be compared against all entries in <spanx style="verb">excl-members</spanx>. Matching keys in <spanx style="verb">src-members</spanx> takes precedence over matching keys in <spanx style="verb">members</spanx>.</t>
</list></t>

<t>The figure below shows IRR data in its raw an unresolved state:</t>

<figure title="An example as-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2, AS65001
source: ARIN

as-set: AS-EXAMPLE-2
members: AS65002, AS-EXAMPLE-3
excl-members: RIPE::AS-EXAMPLE-4, AS65005, AS65002
source: RIPE

as-set: AS-EXAMPLE-3
members: AS65003, AS65005, AS-EXAMPLE-4
src-members: RIPE::AS-EXAMPLE-4
source: RIPE

as-set: AS-EXAMPLE-4
members: AS65004
source: ARIN
]]></sourcecode></figure>

<t>The figure below shows the result of resolving the members of set <spanx style="verb">AS-EXAMPLE-1</spanx> when the <spanx style="verb">excl-members</spanx> logic is applied:</t>

<figure title="AS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS65001, AS65003
]]></sourcecode></figure>

<t><list style="symbols">
  <t>It can be seen that <spanx style="verb">excl-members</spanx> took effect on the object it was defined, not just it's descendants. This is shown by AS65002 not being included in the final result because AS65002 is both a <spanx style="verb">member</spanx> <em>and</em> <spanx style="verb">excl-members</spanx> of AS-EXAMPLE-2.</t>
  <t>AS-EXAMPLE-4 is excluded even though AS-EXAMPLE-4 is defined in ARIN and RIPE::AS-EXAMPLE-4 is specified in <spanx style="verb">excl-members</spanx> on AS-EXAMPLE-2. This is because the AS-EXAMPLE-4 entry in the <spanx style="verb">members</spanx> attribute of AS-EXAMPLE-3 is ambiguous, but a <spanx style="verb">src-members</spanx> attribute has been defined which takes precedence over <spanx style="verb">members</spanx>. The exclusion is applied against the <spanx style="verb">src-members</spanx> attribute of AS-EXAMPLE-3 (which may be an as-set not displayed here or a non-existing set).</t>
</list></t>

</section>
<section anchor="the-route-set-class-1"><name>The route-set Class</name>

<t>When the <spanx style="verb">excl-members</spanx> attribute is populated on a route-set object, the primary keys stored in the attribute reference aut-nums, or as-sets, or route-sets, that <bcp14>MUST NOT</bcp14> be resolved when recursively resolving the members of that route-set object.</t>

<t><list style="numbers" type="1">
  <t>This exclusion applies to the <spanx style="verb">(mp-)members</spanx> attributes of the route-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">(mp-)members</spanx> attributes of all recursively resolved route-sets and as-sets within that route-set. Because the RPSL primary keys stored in the <spanx style="verb">excl-members</spanx> attribute have a registry scope prepended, the primary keys in the <spanx style="verb">(mp-)members</spanx> attributes <bcp14>MUST</bcp14> be checked against all keys in <spanx style="verb">excl-members</spanx> attribute with the registry scope removed.</t>
  <t>This exclusion applies to the <spanx style="verb">src-members</spanx> attribute (as defined in <xref target="draft-romijn-grow-rpsl-registry-scoped-members"/>) of the route-set object which has the <spanx style="verb">excl-members</spanx> attribute populated, and the <spanx style="verb">src-members</spanx> attribute of all recursively resolved route-sets and as-sets within that route-set. In this case the registry scoped RPSL primary keys in <spanx style="verb">src-members</spanx> <bcp14>MUST</bcp14> match a registry scoped key in <spanx style="verb">excl-members</spanx> exactly, without the registry scope having being removed from either of the two keys being compared.</t>
  <t>If both <spanx style="verb">(mp-)members</spanx> and <spanx style="verb">src-members</spanx> are defined on a route-set object, and the same key exists in both attributes when the registry scope is removed from the <spanx style="verb">src-members</spanx> entry, the key from <spanx style="verb">src-members</spanx> with the registry scope prepended <bcp14>MUST</bcp14> be compared against all entries in <spanx style="verb">excl-members</spanx>. Matching keys in <spanx style="verb">src-members</spanx> takes precedence over matching keys in <spanx style="verb">(mp-)members</spanx>.</t>
</list></t>

<t>The figure below shows IRR data in its raw an unresolved state:</t>

<figure title="An example route-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
route-set: RS-EXAMPLE-1
members: 192.0.2.0/25, RS-EXAMPLE-2
source: ARIN

route-set: RS-EXAMPLE-2
mp-members: 2001:db8::/33
mp-members: RS-EXAMPLE-3, RS-EXAMPLE-4
src-members: RIPE::RS-EXAMPLE-3, RIPE::RS-EXAMPLE-4
excl-members: RIPE::RS-EXAMPLE-4
source: RIPE

route-set: RS-EXAMPLE-3
members: 192.0.2.128/25, RS-EXAMPLE-4
source: RIPE

route-set: RS-EXAMPLE-4
members: 2001:db8:8000::/33
source: ARIN
]]></sourcecode></figure>

<t>The figure below shows the result of resolving the members of set <spanx style="verb">RS-EXAMPLE-1</spanx> when the <spanx style="verb">excl-members</spanx> logic is applied:</t>

<figure title="RS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: RS-EXAMPLE-1
members: 192.0.2.0/25, 2001:db8::/33, 192.0.2.128/25
]]></sourcecode></figure>

<t><list style="symbols">
  <t>It can be seen that <spanx style="verb">excl-members</spanx> took effect on the object it was defined on, not just it's descendants. This is shown by 2001:db8:8000::/33 not being included in the final result because RS-EXAMPLE-4 is both a <spanx style="verb">member</spanx> <em>and</em> <spanx style="verb">excl-members</spanx> of RS-EXAMPLE-2.</t>
  <t>Even though RS-EXAMPLE-4 is excluded by RS-EXAMPLE-2, it was also included by RS-EXAMPLE-3, but still 2001:db8:8000::/33 is excluded. This shows that the exclusion logic applies from the point in the hierarchy where it is defined, all the way down, taking precedence over any subsequent includes.</t>
  <t>RS-EXAMPLE-4 is excluded even though RS-EXAMPLE-4 is defined in ARIN and RIPE::RS-EXAMPLE-4 is specified in <spanx style="verb">excl-members</spanx> on RS-EXAMPLE-2. This is because the AS-EXAMPLE-4 entry in the <spanx style="verb">(mp-)members</spanx> attribute of RS-EXAMPLE-3 is ambiguous due to the lack of <spanx style="verb">src-members</spanx> attribute on RS-EXAMPLE-3. This means that the <spanx style="verb">excl-members</spanx> value RIPE::RS-EXAMPLE-4 has to be checked against the <spanx style="verb">members</spanx> attribute on RS-EXAMPLE-3 with the registry scope removed.</t>
</list></t>

</section>
<section anchor="cumulative-excludes"><name>Cumulative Excludes</name>

<t>As as-set or route-set objects are recursively resolved and <spanx style="verb">excl-members</spanx> attributes are discovered, the RPSL primary keys to be excluded need to be tracked. At any point in the hierarchy where <spanx style="verb">excl-members</spanx> is discovered, all <spanx style="verb">(mp-)members</spanx> and <spanx style="verb">src-members</spanx> attributes from that point onwards are subject to the <spanx style="verb">excl-members</spanx> which have been discovered so far. However, depending on the resolution algorithm being used by the resolving software i.e., a depth first search or breadth first search, multiple lists of RPSL keys to exclude may have to be maintained (the exact implementation details are outside the scope of this document).</t>

<t>This section does not aim to define how the logic should be implemented in software, simply to demonstrate that the exclusion list is cumulative, but not as simple as a single global list.</t>

<t>The following figure shows as-set objects in their unresolved state:</t>

<figure title="An example as-set hierarchy, in it's unresolved state"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS-EXAMPLE-2, AS-EXAMPLE-3
excl-members: RIPE::AS-EXAMPLE-4

as-set: AS-EXAMPLE-2
members: AS-EXAMPLE-4
excl-members: RIPE::AS-EXAMPLE-5

as-set: AS-EXAMPLE-4
members: AS65004

as-set: AS-EXAMPLE-3
members: AS-EXAMPLE-5
excl-members: AS65006

as-set: AS-EXAMPLE-5
members: AS65005
]]></sourcecode></figure>

<t>The following figure shows the resolved members of as-set AS-EXAMPLE-1:</t>

<figure title="AS-EXAMPLE-1 in it's resolved state with exclusions applied"><sourcecode type="rpsl"><![CDATA[
as-set: AS-EXAMPLE-1
members: AS65005
]]></sourcecode></figure>

<t><list style="numbers" type="1">
  <t>The resolving process starts by resolving the members of AS-EXAMPLE-1.</t>
  <t>If a depth first search approach is taken by the IRR software, AS-EXAMPLE-2 might be resolved next. AS-EXAMPLE-4 is not included due to the <spanx style="verb">excl-members</spanx> attribute defined on AS-EXAMPLE-1. This is being applied from the point of definition onwards, the resolving process inherited the currently defined list of excludes (RIPE::AS-EXAMPLE-4) when it moved on to resolve AS-EXAMPLE-2.</t>
  <t>AS-EXAMPLE-2 defined a new <spanx style="verb">excl-members</spanx> attribute with the value RIPE::AS-EXAMPLE-5 however, there is nothing left to resolve in AS-EXAMPLE-2 so this exclusion has no effect.</t>
  <t>Continuing the depth first search approach, the IRR software returns to AS-EXAMPLE-1, and uses the exclusion list as it existed whilst resolving AS-EXAMPLE1-1 (it contains only RIPE::AS-EXAMPLE-4), and now begins to resolve AS-EXAMPLE-3.</t>
  <t>AS-EXAMPLE-3 includes AS-EXAMPLE-5. This is not excluded even though the IRR software has encountered an <spanx style="verb">excl-members</spanx> attribute which contains the value RIPE::AS-EXAMPLE-5. This is because that <spanx style="verb">excl-members</spanx> attribute was found on a different branch of the hierarchy.</t>
  <t>Continuing the resolution process, resolving AS-EXAMPLE-5 returns AS65005 only. The exclusion of AS65006 defined on AS-EXAMPLE-3 was applied to the resolution of AS-EXAMPLE-5 in addition to the exclusion of RIPE::AS-EXAMPLE-4, however no <spanx style="verb">members</spanx> or <spanx style="verb">src-members</spanx> attributes were found on AS-EXAMPLE-5 with these values.</t>
</list></t>

<t>The example shows that discovered exclusions do not apply across branches of the hierarchy. This <bcp14>MUST NOT</bcp14> be allowed by the software implementation. If allowed, the operator of an as-set or route-set would be able to excluded objects from other sets they are not responsible for.</t>

</section>
</section>
<section anchor="backwards-compatibility"><name>Backwards Compatibility</name>

<t>The behaviour or RPSL compliant software is to ignore unrecognised attributes. This means that adding the exclusion logic defined in this document based on the contents of a new attribute has no impact when existing IRR software implementations process an object with the new attribute defined.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This memo includes no request to IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document adds the ability to specify that IRR derived prefix and AS path filter lists may exclude specific entries, which may be the cause of security issue, that are presently included by the existing greedy logic.</t>

<t>It is possible that the operator of an including set includes the wrong primary key in the <spanx style="verb">excl-members</spanx> attribute. However, this is not a new issue, it has long been possible to include the unintended primary keys in set objects. This document doesn't change this existing behaviour.</t>

<t>Great progress has been made with the deployment of Route Origin Authorizations (ROAs) as defined in <xref target="RFC9582"/>, and the ongoing development of Autonomous System Provider Authorization (ASPA) objects as defined in <xref target="draft-ietf-sidrops-aspa-verification"/>. The method proposed in this document in intended to compliment those existing developments, further enriching the existing operator's toolkit, and not work against them or be mutually exclusive.</t>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC2622">
  <front>
    <title>Routing Policy Specification Language (RPSL)</title>
    <author fullname="C. Alaettinoglu" initials="C." surname="Alaettinoglu"/>
    <author fullname="C. Villamizar" initials="C." surname="Villamizar"/>
    <author fullname="E. Gerich" initials="E." surname="Gerich"/>
    <author fullname="D. Kessens" initials="D." surname="Kessens"/>
    <author fullname="D. Meyer" initials="D." surname="Meyer"/>
    <author fullname="T. Bates" initials="T." surname="Bates"/>
    <author fullname="D. Karrenberg" initials="D." surname="Karrenberg"/>
    <author fullname="M. Terpstra" initials="M." surname="Terpstra"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>RPSL allows a network operator to be able to specify routing policies at various levels in the Internet hierarchy; for example at the Autonomous System (AS) level. At the same time, policies can be specified with sufficient detail in RPSL so that low level router configurations can be generated from them. RPSL is extensible; new routing protocols and new protocol features can be introduced at any time. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2622"/>
  <seriesInfo name="DOI" value="10.17487/RFC2622"/>
</reference>
<reference anchor="RFC4012">
  <front>
    <title>Routing Policy Specification Language next generation (RPSLng)</title>
    <author fullname="L. Blunk" initials="L." surname="Blunk"/>
    <author fullname="J. Damas" initials="J." surname="Damas"/>
    <author fullname="F. Parent" initials="F." surname="Parent"/>
    <author fullname="A. Robachevsky" initials="A." surname="Robachevsky"/>
    <date month="March" year="2005"/>
    <abstract>
      <t>This memo introduces a new set of simple extensions to the Routing Policy Specification Language (RPSL), enabling the language to document routing policies for the IPv6 and multicast address families currently used in the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4012"/>
  <seriesInfo name="DOI" value="10.17487/RFC4012"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9582">
  <front>
    <title>A Profile for Route Origin Authorizations (ROAs)</title>
    <author fullname="J. Snijders" initials="J." surname="Snijders"/>
    <author fullname="B. Maddison" initials="B." surname="Maddison"/>
    <author fullname="M. Lepinski" initials="M." surname="Lepinski"/>
    <author fullname="D. Kong" initials="D." surname="Kong"/>
    <author fullname="S. Kent" initials="S." surname="Kent"/>
    <date month="May" year="2024"/>
    <abstract>
      <t>This document defines a standard profile for Route Origin Authorizations (ROAs). A ROA is a digitally signed object that provides a means of verifying that an IP address block holder has authorized an Autonomous System (AS) to originate routes to one or more prefixes within the address block. This document obsoletes RFC 6482.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9582"/>
  <seriesInfo name="DOI" value="10.17487/RFC9582"/>
</reference>

<reference anchor="draft-romijn-grow-rpsl-registry-scoped-members" target="https://datatracker.ietf.org/doc/draft-romijn-grow-rpsl-registry-scoped-members/">
  <front>
    <title>Registry scoped members for RPSL set objects</title>
    <author initials="S." surname="Romijn" fullname="Sasha Romijn">
      <organization>Reliably Coded</organization>
    </author>
    <author initials="J." surname="Bensley" fullname="James Bensley">
      <organization>Inter.link GmbH</organization>
    </author>
    <date year="2025" month="February" day="21"/>
  </front>
  <format type="HTML" target="https://www.ietf.org/archive/id/draft-romijn-grow-rpsl-registry-scoped-members-01.html"/>
  <format type="TXT" target="https://www.ietf.org/archive/id/draft-romijn-grow-rpsl-registry-scoped-members-01.txt"/>
</reference>
<reference anchor="draft-ietf-sidrops-aspa-verification" target="https://datatracker.ietf.org/doc/draft-ietf-sidrops-aspa-verification/">
  <front>
    <title>BGP AS_PATH Verification Based on Autonomous System Provider Authorization (ASPA) Objects</title>
    <author initials="A." surname="Azimov" fullname="Alexander Azimov">
      <organization>Yandex</organization>
    </author>
    <author initials="E." surname="Bogomazov" fullname="Eugene Bogomazov">
      <organization>Qrator Labs</organization>
    </author>
    <author initials="R." surname="Bush" fullname="Randy Bush">
      <organization>IIJ &amp; Arrcus</organization>
    </author>
    <author initials="K." surname="Patel" fullname="Keyur Patel">
      <organization>Arrcus</organization>
    </author>
    <author initials="J." surname="Snijders" fullname="Job Snijders">
      <organization></organization>
    </author>
    <author initials="K." surname="Sriram" fullname="Kotikalapudi Sriram">
      <organization>USA NIST</organization>
    </author>
    <date year="2025" month="March" day="23"/>
  </front>
  <format type="HTML" target="https://www.ietf.org/archive/id/draft-ietf-sidrops-aspa-verification-22.html"/>
  <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-sidrops-aspa-verification-22.txt"/>
</reference>


    </references>

</references>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+1d+XIbx5n/H0/Rq1StyBQA8ZJXZrLJQgptM9bBkHIcVyoV
NmYaQFuDGWR6hhDscp5ln2WfbL+ju6d7MAMSkpJsdtdViUhgpo/v/H1HN0ej
0cBUMk//LLMiV+eiKms1qHSVwc8X71eZTuDnjVDvk6xOdT4XxfR7lVRGzMpi
Ka6vbl4KoyozkNNpqe72eyctklwuYaK0lLNqNFW5ydRmVK5MNuKX1WipllNV
mtHR0SCVFTx7cnTydHQ6OjkbJPD7vCg350Lns2KgVyUt31QnR0efH50MTD1d
amN0kVebFbx5efH2i4Gsq0VRng/EaCDgP52bc/HbsXjOc9NnvKbfwv+b6POi
nMtc/yArGBFGyytVjjOdvxNfLqdf0RNqKXV2Lr7HV/9D+wfoO1OVSlXn4nnx
fiHnKleluKnKsXh2RF8DyWAjz1UJL/AHRQqreHR8dHL29JH9pM4r3O6XqlzK
fDPIC/i30ncKtiOuv3hxcnz8ufvxs5MT++PZ0TH8iCSKn/786TN6hIkPnNHf
56N5WayZAaWaa1jzZmSSYqVSx4hzWkolyzluZlFVK3P+5AmwRlalTN7BjrWq
ZmOg1RNg75P9Bn/Cg7P0XdtnBD8j7DMC9uFlyEkWvedZS/+N7L+WxzdjcU2r
8B8zm2+kWcj2V7B6nD/Tcgpy/AI4kXaP2pKcXdLjx+0SnEC0j05GJ8f0ITPM
7eert69eNgRfr9cNoWWZLICvT3S6J71HR8fjRbXM7BRv//D2bzFD9b7yYoYj
joxOy2JlRtKs5OhOlXqmE9aqDxGu3UNGIvX8yysxufnz1eTtV+L3wUPiuTQg
YfDDpK6KvFgWtRE3G1OppbgqizudgrZOSLys/ouDyc3V5FC8eaj8TcZi8oNe
FnctQZlk6j2YXxw//ppk5Tv86n33iBcge8W8WMoftga9qNHAdHxNg/6ulBXo
0Es5Nd0jX8PItVm0Br2GtWziL1ieL38r/lVMyjKpe8b7eiyuQMCz1oBfq01d
tr6hEXeNBRp3k+vvgWCmrXLFdPsrHK93UTelLuWyvaqi0u9kJlfgutpP0Oq+
uZmI15c3b7cUF5zS6Ucq7m5ZHp2cfKC63j8uKulgNBoJkApUNvjt7UIbAXpW
L1VeiXqFezXixx+te/npJwESwb+jj4HfpxuRqpnO0edXCyVu0Ys7U3ArZFWV
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
SDupagAA

-->

</rfc>

